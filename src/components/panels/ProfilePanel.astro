<div id="panel-profile" class="flex-1 flex flex-col hidden app-panel">
  <div class="p-6 max-w-4xl mx-auto w-full">
    <!-- Panel Header -->
    <div class="panel-section-header">
      <div class="header-left-section">
        <div class="section-title">
          <svg class="w-6 h-6 text-primary" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"/>
          </svg>
          Personal Profile
        </div>
        <div class="section-count-island">
          <span class="section-count" id="profile-completion">0%</span>
        </div>
      </div>
      <button class="journal-compose-btn" id="clear-profile">
        <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"/>
        </svg>
        Clear All
      </button>
    </div>

    <!-- Panel Description -->
    <div class="setting-group mb-6">
      <p class="text-on-surface-variant text-sm leading-relaxed">
        Help me understand you better so I can provide more personalized support and guidance.
        <span class="text-primary font-medium">All information stays private on your device.</span>
      </p>
    </div>

    <!-- Profile Settings -->
    <div class="space-y-6">
      
      <!-- Basic Info Group -->
      <div class="setting-group">
        <h4 class="setting-title">
          <svg class="w-5 h-5 inline mr-2 text-primary" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"/>
          </svg>
          Basic Information
        </h4>
        <div class="space-y-4">
          <div>
            <label for="profile-name" class="block text-sm font-medium text-on-surface mb-2">
              What should I call you? <span class="text-error">*</span>
            </label>
            <input 
              type="text" 
              id="profile-name" 
              placeholder="Your preferred name..."
              class="journal-form-input w-full"
              maxlength="50"
              required
            />
          </div>
          
          <div>
            <label for="profile-communication" class="block text-sm font-medium text-on-surface mb-2">
              How should I communicate with you?
            </label>
            <input 
              type="text" 
              id="profile-communication" 
              placeholder="e.g., supportive and encouraging, direct, gentle..."
              class="journal-form-input w-full"
              maxlength="100"
            />
          </div>
        </div>
      </div>

      <!-- Goals & Focus Group -->
      <div class="setting-group">
        <h4 class="setting-title">
          <svg class="w-5 h-5 inline mr-2 text-primary" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4M7.835 4.697a3.42 3.42 0 001.946-.806 3.42 3.42 0 014.438 0 3.42 3.42 0 001.946.806 3.42 3.42 0 013.138 3.138 3.42 3.42 0 00.806 1.946 3.42 3.42 0 010 4.438 3.42 3.42 0 00-.806 1.946 3.42 3.42 0 01-3.138 3.138 3.42 3.42 0 00-1.946.806 3.42 3.42 0 01-4.438 0 3.42 3.42 0 00-1.946-.806 3.42 3.42 0 01-3.138-3.138 3.42 3.42 0 00-.806-1.946 3.42 3.42 0 010-4.438 3.42 3.42 0 00.806-1.946 3.42 3.42 0 013.138-3.138z"/>
          </svg>
          Current Focus
        </h4>
        <p class="setting-description">What you're working on and why you're here</p>
        <div class="space-y-4 mt-4">
          <div>
            <label for="profile-goals" class="block text-sm font-medium text-on-surface mb-2">
              What would you like to work on?
            </label>
            <textarea 
              id="profile-goals" 
              rows="2"
              placeholder="e.g., managing anxiety, building confidence, better sleep, stress management..."
              class="journal-form-textarea w-full"
              maxlength="300"
            ></textarea>
          </div>

          <div>
            <label for="profile-challenges" class="block text-sm font-medium text-on-surface mb-2">
              What brings you here?
            </label>
            <textarea 
              id="profile-challenges" 
              rows="2"
              placeholder="What would you like support with?"
              class="journal-form-textarea w-full"
              maxlength="300"
            ></textarea>
          </div>
        </div>
      </div>

      <!-- Preferences Group -->
      <div class="setting-group">
        <h4 class="setting-title">
          <svg class="w-5 h-5 inline mr-2 text-primary" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z"/>
          </svg>
          Your Preferences
        </h4>
        <p class="setting-description">Help me understand what works best for you</p>
        <div class="space-y-4 mt-4">
          <div>
            <label for="profile-coping" class="block text-sm font-medium text-on-surface mb-2">
              What helps you feel better?
            </label>
            <textarea 
              id="profile-coping" 
              rows="2"
              placeholder="e.g., deep breathing, music, nature walks, meditation..."
              class="journal-form-textarea w-full"
              maxlength="200"
            ></textarea>
          </div>

          <div>
            <label for="profile-notes" class="block text-sm font-medium text-on-surface mb-2">
              Anything else I should know?
            </label>
            <textarea 
              id="profile-notes" 
              rows="2"
              placeholder="Optional notes about preferences, triggers to avoid, etc..."
              class="journal-form-textarea w-full"
              maxlength="200"
            ></textarea>
          </div>
        </div>
      </div>

    </div>
  </div>
</div>

<script>
// @ts-nocheck
// Profile Panel Controller
class ProfileController {
  constructor() {
    this.profileData = this.loadProfile();
    this.autoSaveTimeout = null;
    this.initializeEventListeners();
    this.loadFormData();
    this.updateCompletionStatus();
  }

  initializeEventListeners() {
    // Clear button
    document.getElementById('clear-profile')?.addEventListener('click', () => this.clearProfile());
    
    // Auto-save on input changes with debouncing
    const inputs = document.querySelectorAll('#panel-profile input, #panel-profile textarea');
    inputs.forEach(input => {
      input.addEventListener('input', () => {
        this.debouncedAutoSave();
        this.updateCompletionStatus();
      });
      input.addEventListener('change', () => {
        this.debouncedAutoSave();
        this.updateCompletionStatus();
      });
    });
  }

  debouncedAutoSave() {
    // Clear existing timeout
    if (this.autoSaveTimeout) {
      clearTimeout(this.autoSaveTimeout);
    }
    
    // Set new timeout for auto-save (500ms delay)
    this.autoSaveTimeout = setTimeout(() => {
      this.autoSaveProfile();
    }, 500);
  }

  loadProfile() {
    try {
      return JSON.parse(localStorage.getItem('userProfile') || '{}');
    } catch {
      return {};
    }
  }

  autoSaveProfile() {
    const formData = {
      name: document.getElementById('profile-name')?.value || '',
      communication: document.getElementById('profile-communication')?.value || '',
      goals: document.getElementById('profile-goals')?.value || '',
      challenges: document.getElementById('profile-challenges')?.value || '',
      coping: document.getElementById('profile-coping')?.value || '',
      notes: document.getElementById('profile-notes')?.value || '',
      lastUpdated: new Date().toISOString()
    };

    try {
      localStorage.setItem('userProfile', JSON.stringify(formData));
      this.profileData = formData;
      // Silent auto-save - no notification
    } catch (error) {
      console.error('Auto-save failed:', error);
    }
  }

  clearProfile() {
    // Use the global confirm modal instead of browser alert
    if (window.confirmModal) {
      window.confirmModal.show({
        title: 'Clear Profile',
        message: 'Are you sure you want to clear all profile information? This action cannot be undone and will remove all your personal data.',
        onConfirm: () => {
          localStorage.removeItem('userProfile');
          this.profileData = {};
          this.loadFormData();
          this.updateCompletionStatus();
          this.showSuccessMessage('Profile cleared successfully.');
        }
      });
    } else {
      // Fallback to browser confirm if modal not available
      if (confirm('Are you sure you want to clear all profile information? This cannot be undone.')) {
        localStorage.removeItem('userProfile');
        this.profileData = {};
        this.loadFormData();
        this.updateCompletionStatus();
        this.showSuccessMessage('Profile cleared successfully.');
      }
    }
  }

  loadFormData() {
    // Load saved data into form fields
    const nameField = document.getElementById('profile-name');
    const communicationField = document.getElementById('profile-communication');
    const goalsField = document.getElementById('profile-goals');
    const challengesField = document.getElementById('profile-challenges');
    const copingField = document.getElementById('profile-coping');
    const notesField = document.getElementById('profile-notes');

    if (nameField) nameField.value = this.profileData.name || '';
    if (communicationField) communicationField.value = this.profileData.communication || '';
    if (goalsField) goalsField.value = this.profileData.goals || '';
    if (challengesField) challengesField.value = this.profileData.challenges || '';
    if (copingField) copingField.value = this.profileData.coping || '';
    if (notesField) notesField.value = this.profileData.notes || '';
  }

  updateCompletionStatus() {
    const requiredFields = ['profile-name'];
    const optionalFields = ['profile-communication', 'profile-goals', 'profile-challenges', 'profile-coping'];
    
    let completed = 0;
    let total = requiredFields.length + optionalFields.length;

    // Check required fields (weighted more)
    requiredFields.forEach(fieldId => {
      const field = document.getElementById(fieldId);
      if (field && field.value && field.value.trim()) {
        completed += 2; // Required fields count double
        total += 1; // Adjust total for weighting
      }
    });

    // Check optional fields
    optionalFields.forEach(fieldId => {
      const field = document.getElementById(fieldId);
      if (field && field.value && field.value.trim()) {
        completed += 1;
      }
    });

    const percentage = Math.round((completed / total) * 100);
    const completionEl = document.getElementById('profile-completion');
    if (completionEl) {
      completionEl.textContent = `${percentage}%`;
    }
  }

  showSuccessMessage(message) {
    // Create a temporary success message
    const toast = document.createElement('div');
    toast.className = 'fixed top-4 right-4 bg-primary text-on-primary px-4 py-2 rounded-lg shadow-lg z-50 transition-all duration-300';
    toast.textContent = message;
    document.body.appendChild(toast);
    
    setTimeout(() => {
      toast.style.opacity = '0';
      setTimeout(() => toast.remove(), 300);
    }, 2000);
  }

  showErrorMessage(message) {
    // Create a temporary error message
    const toast = document.createElement('div');
    toast.className = 'fixed top-4 right-4 bg-error text-on-error px-4 py-2 rounded-lg shadow-lg z-50 transition-all duration-300';
    toast.textContent = message;
    document.body.appendChild(toast);
    
    setTimeout(() => {
      toast.style.opacity = '0';
      setTimeout(() => toast.remove(), 300);
    }, 2000);
  }
}

// Initialize when DOM is loaded
document.addEventListener('DOMContentLoaded', () => {
  window.profileController = new ProfileController();
});
</script>