<!-- Chat panel -->
<div id="panel-chat" class="flex-1 flex flex-col chat-panel app-panel cursor-pointer" onclick="focusMessageInput()">
  <!-- Debug Mode Indicator -->
  <div id="debug-indicator" class="fixed top-4 right-4 bg-orange-500 text-white px-3 py-1 rounded-full text-sm font-medium z-50" style="display: none;">
    DEBUG MODE
  </div>
  <!-- Messages area -->
  <div id="messages-container" class="flex-1 overflow-y-auto px-6 py-8 space-y-4 min-h-[60vh]">
  <!-- Background intentionally left clean (mindfulness cards removed) -->

    <!-- Empty state -->
    <div id="empty-state" class="flex-1 flex flex-col items-center justify-center text-center w-full max-w-4xl mx-auto px-8 py-12">
      <!-- Enhanced visual backdrop -->
      <div class="absolute inset-0 overflow-hidden pointer-events-none">
        <div class="absolute top-1/4 left-1/4 w-96 h-96 bg-gradient-radial from-primary/5 to-transparent rounded-full blur-3xl animate-pulse-slow"></div>
        <div class="absolute bottom-1/3 right-1/4 w-80 h-80 bg-gradient-radial from-secondary/4 to-transparent rounded-full blur-3xl animate-pulse-slow" style="animation-delay: 2s;"></div>
      </div>
      
      <!-- Centered breathing circle animation with enhanced presentation -->
      <div class="breathing-circle-container mb-16 flex flex-col items-center justify-center relative z-10">
        <div class="breathing-circle-extra-large relative">
          <div class="breathing-inner-extra-large">
            <div class="chat-icon-background-extra-large">
              <svg class="wellness-icon-extra-large" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.5">
                <circle cx="12" cy="12" r="10"/>
                <path d="M8 14s1.5 2 4 2 4-2 4-2"/>
                <line x1="9" y1="9" x2="9.01" y2="9"/>
                <line x1="15" y1="9" x2="15.01" y2="9"/>
              </svg>
            </div>
          </div>
        </div>
      </div>
      
      <!-- Enhanced typography with fancy misty reveal animation -->
      <div class="mb-16 flex flex-col items-center relative z-10">
        <div class="text-reveal-container">
          <h2 class="text-5xl font-extralight text-on-surface text-center leading-tight tracking-wide mb-4 misty-text-reveal">
            <span class="word-reveal" data-delay="0">Share</span>
            <span class="word-reveal" data-delay="200">what</span>
            <span class="word-reveal" data-delay="400">is</span>
            <span class="word-reveal" data-delay="600">on</span>
            <span class="word-reveal" data-delay="800">your</span>
            <span class="word-reveal" data-delay="1000">mind</span>
          </h2>
        </div>
      </div>
    </div>
  </div>

  <!-- Modern floating message composer -->
  <div class="p-6 pb-8">
    <div class="modern-chat-input">
      <div class="chat-input-container">
        <textarea 
          id="message-input" 
          class="chat-textarea" 
          placeholder="Message Smile AI..."
          rows="1"
        ></textarea>
        <button id="send-btn" class="chat-send-btn">
          <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 19l9 2-9-18-9 18 9-2zm0 0v-8"/>
          </svg>
        </button>
      </div>
    </div>
  </div>
</div>

<!-- More Practices Modal -->
<!-- Modal removed - using inline collapsible list instead -->

<style>
  /* Misty text reveal - static CSS included in head of component */
  .text-reveal-container {
    position: relative;
    overflow: hidden;
    opacity: 0; /* base hidden to avoid any flash */
  }

  /* Only show container once reveal is about to start */
  .text-reveal-container.reveal-ready {
    opacity: 1;
    transition: opacity 150ms ease-out;
  }

  /* Extra guard: if panel is hidden, force container hidden */
  #panel-chat.hidden .text-reveal-container {
    opacity: 0 !important;
  }

  /* Base: always hidden, NO transition so first paint doesn't flash */
  .word-reveal {
    display: inline-block;
    opacity: 0;
    transform: translateY(30px) scale(0.8);
    filter: blur(10px);
    transition: none; /* important: prevents initial fade-out flash */
    margin-right: 0.08em;
    position: relative;
  }

  /* Enable transitions only after paint */
  .word-reveal.ready {
    transition: all 1.2s cubic-bezier(0.25, 0.46, 0.45, 0.94);
  }

  .word-reveal::before {
    content: '';
    position: absolute;
    inset: 0;
    background: linear-gradient(45deg, transparent 30%, rgba(var(--md-primary), 0.3) 50%, transparent 70%);
    transform: translateX(-100%);
    transition: transform 0.8s ease-in-out;
    pointer-events: none;
  }

  .word-reveal.reveal-active {
    opacity: 1;
    transform: translateY(0) scale(1);
    filter: blur(0);
  }

  .word-reveal.reveal-active::before {
    transform: translateX(100%);
  }

  .word-reveal.reveal-active::after {
    content: '';
    position: absolute;
    top: -5px;
    left: 50%;
    width: 4px;
    height: 4px;
    background: rgb(var(--md-primary));
    border-radius: 50%;
    opacity: 0;
    animation: sparkle-fade 1.5s ease-out;
    pointer-events: none;
  }

  @keyframes sparkle-fade {
    0%   { opacity:0; transform: translateX(-50%) translateY(0)   scale(0); }
    20%  { opacity:1; transform: translateX(-50%) translateY(-10px) scale(1); }
    100% { opacity:0; transform: translateX(-50%) translateY(-20px) scale(0); }
  }

  .word-reveal:hover {
    color: rgb(var(--md-primary));
    transform: translateY(-2px) scale(1.05);
    text-shadow: 0 4px 12px rgba(var(--md-primary), 0.3);
    transition: all 0.3s ease;
  }
</style>

<script>
  // Function to focus on message input when clicking anywhere in chat panel
  function focusMessageInput() {
    const messageInput = document.getElementById('message-input') as HTMLTextAreaElement;
    if (messageInput) {
      messageInput.focus();
    }
  }

  // Function to fill message input from suggestion cards
  function fillMessage(message: string) {
    const messageInput = document.getElementById('message-input') as HTMLTextAreaElement;
    if (messageInput) {
      messageInput.value = message;
      messageInput.focus();
      
      // Trigger auto-resize if the textarea has that functionality
      const event = new Event('input', { bubbles: true });
      messageInput.dispatchEvent(event);
      
      // Add a gentle pulse to the send button to draw attention
      const sendBtn = document.getElementById('send-btn');
      if (sendBtn) {
        sendBtn.style.animation = 'gentlePulse 1s ease-in-out';
        setTimeout(() => {
          sendBtn.style.animation = '';
        }, 1000);
      }
    }
  }

  // Initialize misty text reveal animation
  // Initialize misty text reveal animation
  // NOTE: this function only toggles classes. CSS controls the
  // transition enabling via the .ready class so elements start
  // fully hidden (no transition) and then transition in only forward.
  function initMistyTextReveal() {
    const container = document.querySelector('#panel-chat .text-reveal-container') as HTMLElement | null;
    const words = Array.from(document.querySelectorAll('.word-reveal')) as HTMLElement[];

    // Ensure clean state
    words.forEach(w => {
      w.classList.remove('reveal-active');
      w.classList.remove('ready');
    });
    // Hide container until we begin the reveal sequence
    container?.classList.remove('reveal-ready');

    // Next frame, enable transitions (.ready) and then stagger reveal
    requestAnimationFrame(() => {
      // Allow container to become visible (no flash because words are hidden by default)
      container?.classList.add('reveal-ready');
      words.forEach(w => w.classList.add('ready'));

      words.forEach((w) => {
        const delay = parseInt(w.getAttribute('data-delay') || '0', 10) || 0;
        setTimeout(() => {
          w.classList.add('reveal-active');
        }, 300 + delay);
      });
    });
  }

  // Function to trigger animation when panel becomes visible
  function triggerTextAnimation() {
    const chatPanel = document.getElementById('panel-chat');
    if (chatPanel && !chatPanel.classList.contains('hidden')) {
      initMistyTextReveal();
    }
  }

  // Make functions available globally
  (window as any).fillMessage = fillMessage;
  (window as any).focusMessageInput = focusMessageInput;
  (window as any).triggerTextAnimation = triggerTextAnimation;

  // Initialize animation when page loads
  document.addEventListener('DOMContentLoaded', initMistyTextReveal);

  // Reset reveal state when the chat panel gets hidden to avoid showing old state on next show
  document.addEventListener('DOMContentLoaded', () => {
    const panel = document.getElementById('panel-chat');
    if (!panel) return;

    const resetRevealState = () => {
      const container = panel.querySelector('.text-reveal-container') as HTMLElement | null;
      container?.classList.remove('reveal-ready');
      const words = panel.querySelectorAll('.word-reveal') as NodeListOf<HTMLElement>;
      words.forEach(w => { w.classList.remove('ready', 'reveal-active'); });
    };

    const observer = new MutationObserver((muts) => {
      for (const m of muts) {
        if (m.type === 'attributes' && m.attributeName === 'class') {
          if (panel.classList.contains('hidden')) {
            resetRevealState();
          }
        }
      }
    });
    observer.observe(panel, { attributes: true });
  });

  // NOTE: CSS for the text reveal is provided as a static <style> block below
</script>
