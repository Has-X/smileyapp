---
// Security Unlock Modal - Password entry for encrypted storage
---

<!-- Security Unlock Modal -->
<div id="security-unlock-modal" class="confirm-modal hidden" data-close-on-backdrop="false" data-close-on-escape="false">
  <div class="confirm-modal-backdrop"></div>
  <div class="confirm-modal-container">
    <div class="confirm-modal-content security-modal-content">
      
      
      <!-- Modal Header -->
      <div class="confirm-modal-header">
        <div class="confirm-modal-icon security-unlock-icon">
          <svg class="w-8 h-8" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 15v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v4h8z"/>
          </svg>
        </div>
        <div class="confirm-modal-text">
          <h3 class="confirm-modal-title">Enter Password</h3>
          <p class="confirm-modal-message">Your data is encrypted. Please enter your password to unlock.</p>
        </div>
      </div>

      <!-- Modal Body -->
      <div class="security-modal-body">
        <form id="unlock-form" class="security-form">
          <div class="form-field">
            <label for="unlock-password" class="form-label">Password</label>
            <div class="password-input-container">
              <input 
                type="password" 
                id="unlock-password" 
                name="password" 
                class="form-input password-input" 
                placeholder="Enter your password"
                required
                autocomplete="current-password"
              />
              <button type="button" class="password-toggle-btn" id="unlock-password-toggle">
                <svg width="20" height="20" class="password-icon-show" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"/>
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"/>
                </svg>
                <svg width="20" height="20" class="password-icon-hide hidden" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13.875 18.825A10.05 10.05 0 0112 19c-4.478 0-8.268-2.943-9.543-7a9.97 9.97 0 011.563-3.029m5.858.908a3 3 0 114.243 4.243M9.878 9.878l4.242 4.242M9.878 9.878L3 3m6.878 6.878L21 21"/>
                </svg>
              </button>
            </div>
            <div id="unlock-error" class="form-error hidden"></div>
          </div>

          <div class="security-options">
            <label class="security-checkbox">
              <input type="checkbox" id="remember-session" />
              <span class="checkbox-mark"></span>
              <span class="checkbox-label">Keep unlocked during this session</span>
            </label>
          </div>
        </form>
      </div>

      <!-- Modal Actions -->
      <div class="confirm-modal-actions">
        <button type="button" id="unlock-reset" class="confirm-btn confirm-btn-danger">
          <svg width="16" height="16" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"/>
          </svg>
          <span>Reset & Delete All Data</span>
        </button>
        <button type="submit" id="unlock-submit" class="confirm-btn confirm-btn-primary" form="unlock-form">
          <svg width="16" height="16" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <rect x="6" y="11" width="12" height="9" rx="2" ry="2" stroke-width="2"/>
            <path d="M10 11V7a2 2 0 0 1 4 0" stroke-width="2" stroke-linecap="round"/>
          </svg>
          <span>Unlock</span>
        </button>
      </div>
    </div>
  </div>
</div>

<style>
/* Security Modal Styles */
.security-modal-content {
  width: 100%;
  max-width: 420px;
  padding: 2rem;
}

.security-unlock-icon {
  background: rgba(var(--md-primary), 0.1);
  border-color: rgba(var(--md-primary), 0.2);
  color: rgb(var(--md-primary));
}

.security-modal-body {
  margin: 1.5rem 0;
}

.security-form {
  width: 100%;
}

.password-input-container {
  position: relative;
  display: flex;
  align-items: center;
}

.password-input {
  padding-right: 3rem;
}

.password-toggle-btn {
  position: absolute;
  right: 0.75rem;
  top: 50%;
  transform: translateY(-50%);
  background: none;
  border: none;
  color: rgb(var(--md-on-surface-variant));
  cursor: pointer;
  padding: 0.5rem;
  border-radius: 0.375rem;
  transition: all 0.2s ease;
  display: flex;
  align-items: center;
  justify-content: center;
}

.password-toggle-btn:hover {
  color: rgb(var(--md-on-surface));
  background: rgba(var(--md-surface-variant), 0.1);
}

.password-toggle-btn:focus {
  outline: 2px solid rgb(var(--md-primary));
  outline-offset: 2px;
}

.security-options {
  margin-top: 1rem;
  padding-top: 1rem;
  border-top: 1px solid rgb(var(--md-outline-variant));
}

.security-checkbox {
  display: flex;
  align-items: center;
  gap: 0.75rem;
  cursor: pointer;
  user-select: none;
}

.security-checkbox input[type="checkbox"] {
  display: none;
}

.checkbox-mark {
  width: 1.25rem;
  height: 1.25rem;
  border: 2px solid rgb(var(--md-outline));
  border-radius: 0.25rem;
  display: flex;
  align-items: center;
  justify-content: center;
  transition: all 0.2s ease;
  position: relative;
  background: rgb(var(--md-surface));
}

.checkbox-mark::after {
  content: '';
  width: 0.5rem;
  height: 0.25rem;
  border: 2px solid rgb(var(--md-on-primary));
  border-top: none;
  border-right: none;
  transform: rotate(-45deg) scale(0);
  transition: transform 0.2s ease;
  opacity: 0;
}

.security-checkbox input[type="checkbox"]:checked + .checkbox-mark {
  background: rgb(var(--md-primary));
  border-color: rgb(var(--md-primary));
}

.security-checkbox input[type="checkbox"]:checked + .checkbox-mark::after {
  opacity: 1;
  transform: rotate(-45deg) scale(1);
}

/* Subtle contrast and focus improvements for checkbox */
.checkbox-mark:hover {
  border-color: rgb(var(--md-primary));
  background: rgba(var(--md-primary-container), 0.08);
}

.security-checkbox input[type="checkbox"]:focus + .checkbox-mark {
  box-shadow: 0 0 0 3px rgba(var(--md-primary), 0.25);
  outline: 2px solid rgb(var(--md-primary));
  outline-offset: 1px;
}

.checkbox-label {
  font-size: 0.875rem;
  color: rgb(var(--md-on-surface));
}

.form-error {
  margin-top: 0.5rem;
  padding: 0.5rem;
  background: rgb(var(--md-error-container));
  color: rgb(var(--md-on-error-container));
  border-radius: 0.5rem;
  font-size: 0.875rem;
  border-left: 3px solid rgb(var(--md-error));
}

.form-error.hidden {
  display: none;
}

/* Loading state */
.confirm-btn.loading {
  opacity: 0.7;
  pointer-events: none;
}

.confirm-btn.loading svg {
  animation: spin 1s linear infinite;
}

/* Ensure perfect icon alignment */
.confirm-btn svg {
  flex-shrink: 0;
  display: block;
}

@keyframes spin {
  from { transform: rotate(0deg); }
  to { transform: rotate(360deg); }
}

/* Dark theme adjustments */
  [data-theme="dark"] .security-modal-content,
  [data-theme$="-dark"] .security-modal-content {
  background: rgb(var(--md-surface-container));
  border: 1px solid rgb(var(--md-outline-variant));
}

/* Improve checkbox contrast in dark mode */
  [data-theme="dark"] .checkbox-mark,
  [data-theme$="-dark"] .checkbox-mark {
  border-color: rgb(var(--md-outline));
  background: rgb(var(--md-surface-container));
}

  [data-theme="dark"] .checkbox-mark:hover,
  [data-theme$="-dark"] .checkbox-mark:hover {
  border-color: rgb(var(--md-primary));
  background: rgba(var(--md-primary-container), 0.15);
}

  [data-theme="dark"] .checkbox-label,
  [data-theme$="-dark"] .checkbox-label {
  color: rgb(var(--md-on-surface));
}

  [data-theme="dark"] .security-checkbox input[type="checkbox"]:checked + .checkbox-mark,
  [data-theme$="-dark"] .security-checkbox input[type="checkbox"]:checked + .checkbox-mark {
  background: rgb(var(--md-primary));
  border-color: rgb(var(--md-primary));
}

  [data-theme="dark"] .password-toggle-btn:hover,
  [data-theme$="-dark"] .password-toggle-btn:hover {
  background: rgba(var(--md-surface-variant), 0.2);
}
</style>

<script>
// Security Unlock Modal - Provides password entry interface for unlocking encrypted storage

  class SecurityUnlockModal {
    private modal: HTMLElement | null = null;
    private passwordInput: HTMLInputElement | null = null;
    private toggleBtn: HTMLElement | null = null;
    private errorDiv: HTMLElement | null = null;
    private submitBtn: HTMLElement | null = null;
    private form: HTMLFormElement | null = null;
    private secureStorage: any;
    private onUnlockCallback: (() => void) | null = null;

    constructor() {
      this.init();
    }

    private async init() {
      this.modal = document.getElementById('security-unlock-modal');
      this.passwordInput = document.getElementById('unlock-password') as HTMLInputElement;
      this.toggleBtn = document.getElementById('unlock-password-toggle');
      this.errorDiv = document.getElementById('unlock-error');
      this.submitBtn = document.getElementById('unlock-submit');
      this.form = document.getElementById('unlock-form') as HTMLFormElement;

      if (!this.modal || !this.passwordInput || !this.form) return;

      // Import and initialize secure storage
      const SecureStorageModule = await import('../utils/secure-storage.ts');
      this.secureStorage = SecureStorageModule.default.getInstance();

      this.bindEvents();
      this.checkIfUnlockNeeded();
    }

    private bindEvents() {
      if (!this.modal || !this.passwordInput || !this.toggleBtn || !this.form) return;

      // Password toggle
      this.toggleBtn.addEventListener('click', () => this.togglePasswordVisibility());

      // Form submission (Enter key or programmatic submit)
      this.form.addEventListener('submit', (e) => this.handleUnlock(e));

      // Explicit click handler for Unlock button to improve reliability across browsers
      this.submitBtn = document.getElementById('unlock-submit');
      this.submitBtn?.addEventListener('click', (e) => {
        e.preventDefault();
        // Prefer form.requestSubmit if available
        if (this.form && (this.form as any).requestSubmit) {
          (this.form as any).requestSubmit();
        } else {
          this.handleUnlock(e);
        }
      });

      // Reset and delete all data
      const resetBtn = document.getElementById('unlock-reset');
      resetBtn?.addEventListener('click', async () => {
        const confirmModal: any = (window as any).confirmModal;
        const proceed = async () => {
          try {
            const SecureStorageModule = await import('../utils/secure-storage.ts');
            const storage = SecureStorageModule.default.getInstance();
            await storage.resetAndDeleteAllData();
            // Reload app to fresh state
            window.location.reload();
          } catch (err) {
            console.error('Reset failed:', err);
            // Use global notification system if available, else fallback to console
            if ((window as any).smileApp && typeof (window as any).smileApp.showCustomNotification === 'function') {
              (window as any).smileApp.showCustomNotification('Failed to reset data. Please try again.', 'error');
            } else {
              console.warn('Failed to reset data. Please try again.');
            }
          }
        };
        if (confirmModal && confirmModal.show) {
          confirmModal.show({
            title: 'Delete All Data?',
            message: 'This will permanently erase all local data and reset the app. This action cannot be undone.',
            onConfirm: proceed,
          });
        } else {
          // Use global helper to prefer app confirm modal and fallback to native confirm
          (window as any).showAppConfirm('Delete All Data?', 'Delete all local data and reset the app? This cannot be undone.', proceed);
        }
      });

      // Enter key in password field
      this.passwordInput.addEventListener('keydown', (e) => {
        if (e.key === 'Enter') {
          e.preventDefault();
          this.handleUnlock(e);
        }
      });

      // Auto-focus password input when modal shows
      const observer = new MutationObserver((mutations) => {
        mutations.forEach((mutation) => {
          if (mutation.type === 'attributes' && mutation.attributeName === 'class') {
            const target = mutation.target as HTMLElement;
            if (target === this.modal && !target.classList.contains('hidden')) {
              setTimeout(() => this.passwordInput?.focus(), 100);
            }
          }
        });
      });

      observer.observe(this.modal, { attributes: true });

      // Listen for storage lock events
      window.addEventListener('smile:storage-locked', () => {
        this.show();
      });
    }

    private async checkIfUnlockNeeded() {
      if (!this.secureStorage) return;

      if (this.secureStorage.isEncryptionEnabled() && !this.secureStorage.isStorageUnlocked()) {
        this.show();
      }
    }

    public show(onUnlock?: () => void) {
      if (!this.modal) return;

      this.onUnlockCallback = onUnlock || null;
      (window as any).modalManager?.show(this.modal);
      this.clearError();
      this.resetForm();
      
      // Focus password input
      setTimeout(() => this.passwordInput?.focus(), 100);
    }

    public hide() {
      if (!this.modal) return;

      (window as any).modalManager?.hide(this.modal);
      this.clearError();
      this.resetForm();
    }

    private togglePasswordVisibility() {
      if (!this.passwordInput || !this.toggleBtn) return;

      const isPassword = this.passwordInput.type === 'password';
      this.passwordInput.type = isPassword ? 'text' : 'password';

      const showIcon = this.toggleBtn.querySelector('.password-icon-show');
      const hideIcon = this.toggleBtn.querySelector('.password-icon-hide');

      if (showIcon && hideIcon) {
        showIcon.classList.toggle('hidden', !isPassword);
        hideIcon.classList.toggle('hidden', isPassword);
      }
    }

    private async handleUnlock(e: Event) {
      e.preventDefault();
      
      if (!this.passwordInput || !this.submitBtn || !this.secureStorage) return;

      const password = this.passwordInput.value.trim();
      if (!password) {
        this.showError('Please enter your password');
        return;
      }

      this.setLoading(true);
      this.clearError();

      try {
        const success = await this.secureStorage.unlock(password);
        
        if (success) {
          this.hide();
          if (this.onUnlockCallback) {
            this.onUnlockCallback();
          }
          
          // Dispatch unlock event
          window.dispatchEvent(new CustomEvent('smile:storage-unlocked'));
          
          // Show success notification
          this.showNotification('Storage unlocked successfully', 'success');
        } else {
          this.showError('Incorrect password. Please try again.');
          this.passwordInput.focus();
          this.passwordInput.select();
        }
      } catch (error) {
        console.error('Unlock error:', error);
        this.showError('Failed to unlock storage. Please try again.');
      } finally {
        this.setLoading(false);
      }
    }

    private showError(message: string) {
      if (!this.errorDiv) return;

      this.errorDiv.textContent = message;
      this.errorDiv.classList.remove('hidden');
      
      // Auto-hide error after 5 seconds
      setTimeout(() => this.clearError(), 5000);
    }

    private clearError() {
      if (!this.errorDiv) return;

      this.errorDiv.classList.add('hidden');
      this.errorDiv.textContent = '';
    }

    private resetForm() {
      if (!this.passwordInput) return;

      this.passwordInput.value = '';
      this.passwordInput.type = 'password';
      
      // Reset toggle button to show the "show password" icon (open eye) when password is hidden
      if (this.toggleBtn) {
        const showIcon = this.toggleBtn.querySelector('.password-icon-show');
        const hideIcon = this.toggleBtn.querySelector('.password-icon-hide');
        showIcon?.classList.remove('hidden');
        hideIcon?.classList.add('hidden');
      }
    }

    private setLoading(loading: boolean) {
      if (!this.submitBtn) return;

      const submitButton = this.submitBtn as HTMLButtonElement;
      if (loading) {
        submitButton.classList.add('loading');
        submitButton.disabled = true;
      } else {
        submitButton.classList.remove('loading');
        submitButton.disabled = false;
      }
    }

    private showNotification(message: string, type: 'success' | 'error' | 'info' = 'info') {
      // Prefer the global notification system so messages stack correctly above modals
      const globalApp = (window as any).smileApp;
      if (globalApp && typeof globalApp.showCustomNotification === 'function') {
        globalApp.showCustomNotification(message, type);
        return;
      }

      // Fallback: create a quick notification with very high z-index so it's visible above modals/backdrop
      const notification = document.createElement('div');
      notification.className = `security-notification security-notification-${type}`;
      notification.textContent = message;
      Object.assign(notification.style, {
        position: 'fixed',
        top: '2rem',
        right: '2rem',
        background: type === 'success' ? 'hsl(var(--success-container))' : 
                   type === 'error' ? 'hsl(var(--error-container))' : 'hsl(var(--primary-container))',
        color: type === 'success' ? 'hsl(var(--on-success-container))' : 
               type === 'error' ? 'hsl(var(--on-error-container))' : 'hsl(var(--on-primary-container))',
        padding: '1rem 1.5rem',
        borderRadius: '0.5rem',
        boxShadow: '0 6px 20px rgba(0, 0, 0, 0.25)',
        zIndex: '13150',
        maxWidth: '400px',
        fontSize: '0.875rem',
        fontWeight: '500',
        transform: 'translateX(100%)',
        transition: 'transform 0.3s ease'
      });

      document.body.appendChild(notification);
      setTimeout(() => notification.style.transform = 'translateX(0)', 10);
      setTimeout(() => {
        notification.style.transform = 'translateX(100%)';
        setTimeout(() => notification.remove(), 300);
      }, 3000);
    }
  }

  // Initialize when DOM is loaded
  document.addEventListener('DOMContentLoaded', () => {
    const inst = new SecurityUnlockModal();
    (window as any).securityUnlockModal = inst;
  });
</script>
