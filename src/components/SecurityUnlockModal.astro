---
// Enhanced Security Unlock Modal - Password entry for encrypted storage with routing preservation
---

<!-- Security Unlock Modal -->
<div id="security-unlock-modal" class="confirm-modal hidden" data-close-on-backdrop="false" data-close-on-escape="false">
  <div class="confirm-modal-backdrop"></div>
  <div class="confirm-modal-container">
    <div class="confirm-modal-content security-modal-content">
      
      <!-- Modal Header -->
      <div class="confirm-modal-header">
        <div class="confirm-modal-icon security-unlock-icon">
          <svg class="w-8 h-8" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 15v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v4h8z"/>
          </svg>
        </div>
        <div class="confirm-modal-text">
          <h3 class="confirm-modal-title">Unlock Required</h3>
          <p class="confirm-modal-message">Enter your password to access encrypted data</p>
        </div>
      </div>

      <!-- Modal Body -->
      <div class="security-modal-body">
        <form id="unlock-form" class="security-form">
          <div class="form-field">
            <label for="unlock-password" class="form-label">Password</label>
            <div class="password-input-container">
              <input 
                type="password" 
                id="unlock-password" 
                class="form-input password-input" 
                placeholder="Enter your password"
                autocomplete="current-password"
                required
              />
              <button type="button" id="unlock-password-toggle" class="password-toggle-btn" title="Toggle password visibility">
                <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"/>
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"/>
                </svg>
              </button>
            </div>
          </div>
          
          <div class="form-error hidden" id="unlock-error">
            Invalid password. Please try again.
          </div>
          
          <div class="security-options">
            <label class="security-checkbox">
              <input type="checkbox" id="remember-session" checked>
              <span class="checkbox-mark"></span>
              <span class="checkbox-label">Remember for this session</span>
            </label>
          </div>
        </form>
      </div>

      <!-- Modal Actions -->
      <div class="confirm-modal-actions">
        <button type="button" class="confirm-btn confirm-btn-secondary" id="unlock-cancel">
          <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"/>
          </svg>
          Cancel
        </button>
        <button type="submit" form="unlock-form" class="confirm-btn confirm-btn-primary" id="unlock-submit">
          <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 11V7a4 4 0 118 0m-4 8v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2z"/>
          </svg>
          <span id="unlock-submit-text">Unlock</span>
        </button>
      </div>
    </div>
  </div>
</div>

<style>
/* Enhanced Security Modal Styles */
.security-modal-content {
  width: 100%;
  max-width: 420px;
  padding: 2rem;
}

.security-unlock-icon {
  background: rgba(var(--md-primary), 0.1);
  border-color: rgba(var(--md-primary), 0.2);
  color: rgb(var(--md-primary));
}

.security-modal-body {
  margin: 1.5rem 0;
}

.security-form {
  width: 100%;
}

.password-input-container {
  position: relative;
  display: flex;
  align-items: center;
}

.password-input {
  padding-right: 3rem;
}

.password-toggle-btn {
  position: absolute;
  right: 0.75rem;
  top: 50%;
  transform: translateY(-50%);
  background: none;
  border: none;
  color: rgb(var(--md-on-surface-variant));
  cursor: pointer;
  padding: 0.5rem;
  border-radius: 0.375rem;
  transition: all 0.2s ease;
  display: flex;
  align-items: center;
  justify-content: center;
}

.password-toggle-btn:hover {
  color: rgb(var(--md-on-surface));
  background: rgba(var(--md-surface-variant), 0.1);
}

.password-toggle-btn:focus {
  outline: 2px solid rgb(var(--md-primary));
  outline-offset: 2px;
}

.security-options {
  margin-top: 1rem;
  padding-top: 1rem;
  border-top: 1px solid rgb(var(--md-outline-variant));
}

.security-checkbox {
  display: flex;
  align-items: center;
  gap: 0.75rem;
  cursor: pointer;
  user-select: none;
}

.security-checkbox input[type="checkbox"] {
  display: none;
}

.checkbox-mark {
  width: 1.25rem;
  height: 1.25rem;
  border: 2px solid rgb(var(--md-outline));
  border-radius: 0.25rem;
  display: flex;
  align-items: center;
  justify-content: center;
  transition: all 0.2s ease;
  position: relative;
  background: rgb(var(--md-surface));
}

.checkbox-mark::after {
  content: '';
  width: 0.5rem;
  height: 0.25rem;
  border: 2px solid rgb(var(--md-on-primary));
  border-top: none;
  border-right: none;
  transform: rotate(-45deg) scale(0);
  transition: transform 0.2s ease;
  opacity: 0;
}

.security-checkbox input[type="checkbox"]:checked + .checkbox-mark {
  background: rgb(var(--md-primary));
  border-color: rgb(var(--md-primary));
}

.security-checkbox input[type="checkbox"]:checked + .checkbox-mark::after {
  opacity: 1;
  transform: rotate(-45deg) scale(1);
}

.checkbox-mark:hover {
  border-color: rgb(var(--md-primary));
  background: rgba(var(--md-primary-container), 0.08);
}

.security-checkbox input[type="checkbox"]:focus + .checkbox-mark {
  box-shadow: 0 0 0 3px rgba(var(--md-primary), 0.25);
  outline: 2px solid rgb(var(--md-primary));
  outline-offset: 1px;
}

.checkbox-label {
  font-size: 0.875rem;
  color: rgb(var(--md-on-surface));
}

.form-error {
  margin-top: 0.5rem;
  padding: 0.5rem;
  background: rgb(var(--md-error-container));
  color: rgb(var(--md-on-error-container));
  border-radius: 0.5rem;
  font-size: 0.875rem;
  border-left: 3px solid rgb(var(--md-error));
}

.form-error.hidden {
  display: none;
}

/* Loading state */
.confirm-btn.loading {
  opacity: 0.7;
  pointer-events: none;
}

.confirm-btn.loading svg {
  animation: spin 1s linear infinite;
}

.confirm-btn svg {
  flex-shrink: 0;
  display: block;
}

@keyframes spin {
  from { transform: rotate(0deg); }
  to { transform: rotate(360deg); }
}

/* Dark theme adjustments */
[data-theme="dark"] .security-modal-content,
[data-theme$="-dark"] .security-modal-content {
  background: rgb(var(--md-surface-container));
  border: 1px solid rgb(var(--md-outline-variant));
}

[data-theme="dark"] .checkbox-mark,
[data-theme$="-dark"] .checkbox-mark {
  border-color: rgb(var(--md-outline));
  background: rgb(var(--md-surface-container));
}

[data-theme="dark"] .checkbox-mark:hover,
[data-theme$="-dark"] .checkbox-mark:hover {
  border-color: rgb(var(--md-primary));
  background: rgba(var(--md-primary-container), 0.15);
}

[data-theme="dark"] .checkbox-label,
[data-theme$="-dark"] .checkbox-label {
  color: rgb(var(--md-on-surface));
}

[data-theme="dark"] .security-checkbox input[type="checkbox"]:checked + .checkbox-mark,
[data-theme$="-dark"] .security-checkbox input[type="checkbox"]:checked + .checkbox-mark {
  background: rgb(var(--md-primary));
  border-color: rgb(var(--md-primary));
}

[data-theme="dark"] .password-toggle-btn:hover,
[data-theme$="-dark"] .password-toggle-btn:hover {
  background: rgba(var(--md-surface-variant), 0.2);
}
</style>

<script>
// Enhanced Security Unlock Modal - Provides password entry interface with routing preservation

class EnhancedSecurityUnlockModal {
  private modal: HTMLElement | null = null;
  private passwordInput: HTMLInputElement | null = null;
  private toggleBtn: HTMLElement | null = null;
  private errorDiv: HTMLElement | null = null;
  private submitBtn: HTMLElement | null = null;
  private cancelBtn: HTMLElement | null = null;
  private form: HTMLFormElement | null = null;
  private rememberCheckbox: HTMLInputElement | null = null;
  private secureStorage: any;
  private onUnlockCallback: (() => void) | null = null;
  private countdownInterval: number | null = null;
  private routingContext: any = null; // Store routing state
  private lockStatusIndicator: HTMLElement | null = null;
  private lockCountdown: HTMLElement | null = null;

  constructor() {
    this.init();
  }

  private async init() {
    this.modal = document.getElementById('security-unlock-modal');
    this.passwordInput = document.getElementById('unlock-password') as HTMLInputElement;
    this.toggleBtn = document.getElementById('unlock-password-toggle');
    this.errorDiv = document.getElementById('unlock-error');
    this.submitBtn = document.getElementById('unlock-submit');
    this.cancelBtn = document.getElementById('unlock-cancel');
    this.form = document.getElementById('unlock-form') as HTMLFormElement;
    this.rememberCheckbox = document.getElementById('remember-session') as HTMLInputElement;

    if (!this.modal || !this.passwordInput || !this.form) return;

    // Import and initialize secure storage
    try {
      const SecureStorageModule = await import('../utils/secure-storage.ts');
      this.secureStorage = SecureStorageModule.default.getInstance();
    } catch (err) {
      console.error('Failed to load secure storage:', err);
    }

    this.bindEvents();
    this.checkIfUnlockNeeded();
    this.setupStorageListeners();
  }

  private bindEvents() {
    if (!this.form || !this.passwordInput) return;

    // Form submission
    this.form.addEventListener('submit', (e) => this.handleUnlock(e));

    // Password toggle
    this.toggleBtn?.addEventListener('click', () => this.togglePasswordVisibility());

    // Cancel button
    this.cancelBtn?.addEventListener('click', () => this.handleCancel());

    // Input events
    this.passwordInput.addEventListener('input', () => this.clearError());
    this.passwordInput.addEventListener('keydown', (e) => {
      if (e.key === 'Enter' && !e.shiftKey) {
        e.preventDefault();
        this.form?.requestSubmit();
      }
    });

    // Auto-focus when modal becomes visible
    const observer = new MutationObserver((mutations) => {
      mutations.forEach((mutation) => {
        if (mutation.type === 'attributes' && mutation.attributeName === 'class') {
          const target = mutation.target as HTMLElement;
          if (target === this.modal && !target.classList.contains('hidden')) {
            setTimeout(() => this.passwordInput?.focus(), 100);
          }
        }
      });
    });

    if (this.modal) {
      observer.observe(this.modal, { attributes: true });
    }
  }

  private setupStorageListeners() {
    // Listen for storage events
    window.addEventListener('smile:storage-locked', () => {
      // Storage locked - modal will auto-show via unlock-required event
    });

    window.addEventListener('smile:storage-unlocked', () => {
      this.hide();
    });

    window.addEventListener('smile:storage-unlock-required', () => {
      this.preserveRoutingContext();
      this.show();
    });
  }

  private preserveRoutingContext() {
    // Store current routing state to restore after unlock
    try {
      const stateManager = (window as any).stateManager;
      if (stateManager) {
        this.routingContext = {
          panel: stateManager.getState().currentPanel,
          view: stateManager.getState().currentView,
          action: stateManager.getState().currentAction,
          scrollPosition: window.scrollY,
          timestamp: Date.now()
        };
      }
    } catch (error) {
      console.warn('Could not preserve routing context:', error);
    }
  }

  private restoreRoutingContext() {
    // Restore routing state after successful unlock
    if (!this.routingContext) return;

    try {
      const stateManager = (window as any).stateManager;
      if (stateManager && this.routingContext) {
        // Restore the panel/view/action state
        stateManager.navigateToPanel(
          this.routingContext.panel,
          this.routingContext.view,
          this.routingContext.action
        );

        // Restore scroll position
        setTimeout(() => {
          window.scrollTo(0, this.routingContext.scrollPosition);
        }, 100);

        this.routingContext = null;
      }
    } catch (error) {
      console.warn('Could not restore routing context:', error);
    }
  }

  private async checkIfUnlockNeeded() {
    if (this.secureStorage?.needsUnlock?.()) {
      this.updateLockStatus(true);
      // Don't auto-show modal on load, wait for user action
    } else {
      this.updateLockStatus(false);
      this.startCountdownMonitoring();
    }
  }

  public show(onUnlock?: () => void) {
    if (!this.modal) return;

    this.onUnlockCallback = onUnlock || null;
    this.resetForm();
    this.modal.classList.remove('hidden');
    
    // Use modal manager if available
    const modalManager = (window as any).modalManager;
    if (modalManager && typeof modalManager.show === 'function') {
      modalManager.show(this.modal);
    }

    setTimeout(() => this.passwordInput?.focus(), 100);
  }

  public hide() {
    if (!this.modal) return;

    this.modal.classList.add('hidden');
    
    // Use modal manager if available
    const modalManager = (window as any).modalManager;
    if (modalManager && typeof modalManager.hide === 'function') {
      modalManager.hide(this.modal);
    }

    this.resetForm();
  }

  private handleCancel() {
    // Show wipe data confirmation instead of blocking
    const confirmMessage = 'Unable to unlock? You can wipe all data to start fresh.\n\n' +
                          'This will:\n' +
                          '• Delete all chat history\n' +
                          '• Clear all journal entries\n' +
                          '• Remove all memories\n' +
                          '• Disable encryption\n' +
                          '• Reset all settings\n\n' +
                          'This action cannot be undone. Wipe all data?';
    
    if (confirm(confirmMessage)) {
      this.wipeAllData();
    } else {
      // Focus back on password input if they chose not to wipe
      if (this.passwordInput) {
        this.passwordInput.focus();
      }
    }
  }

  private async wipeAllData() {
    try {
      // Clear all localStorage
      Object.keys(localStorage).forEach(key => {
        if (key.startsWith('smile-')) {
          localStorage.removeItem(key);
        }
      });
      
      // Clear sessionStorage
      sessionStorage.clear();
      
      // Clear IndexedDB if exists
      if ('indexedDB' in window) {
        try {
          const dbs = await indexedDB.databases();
          await Promise.all(
            dbs.map(db => {
              if (db.name && db.name.startsWith('smile')) {
                return new Promise<void>((resolve) => {
                  const deleteRequest = indexedDB.deleteDatabase(db.name as string);
                  deleteRequest.onsuccess = () => resolve();
                  deleteRequest.onerror = () => resolve(); // Continue even if error
                });
              }
            })
          );
        } catch (e) {
          console.log('IndexedDB cleanup completed');
        }
      }
      
      // Show success message and reload
      alert('All data has been wiped. The page will now reload.');
      window.location.reload();
      
    } catch (error) {
      console.error('Error wiping data:', error);
      alert('There was an error wiping data. Please manually clear your browser data for this site.');
    }
  }

  private togglePasswordVisibility() {
    if (!this.passwordInput || !this.toggleBtn) return;

    const isPasswordHidden = this.passwordInput.type === 'password';
    this.passwordInput.type = isPasswordHidden ? 'text' : 'password';
    
    // Update icon - when password is visible (text), show hide icon (eye-slash)
    // when password is hidden (password), show show icon (eye)
    const svg = this.toggleBtn.querySelector('svg');
    if (svg) {
      svg.innerHTML = isPasswordHidden
        ? '<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13.875 18.825A10.05 10.05 0 0112 19c-4.478 0-8.268-2.943-9.543-7a9.97 9.97 0 011.563-3.029m5.858.908a3 3 0 114.243 4.243M9.878 9.878l4.242 4.242M9.878 9.878L3 3m6.878 6.878L12 12m-3.122-3.122l4.242 4.242M12 12l3 3m-6.878-6.878l3.121 3.121"/>'
        : '<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"/><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"/>';
    }
  }

  private async handleUnlock(e: Event) {
    e.preventDefault();
    if (!this.passwordInput || !this.secureStorage) return;

    const password = this.passwordInput.value.trim();
    if (!password) {
      this.showError('Please enter your password');
      return;
    }

    this.setLoading(true);
    this.clearError();

    try {
      const rememberSession = this.rememberCheckbox?.checked ?? true;
      const success = await this.secureStorage.unlock(password, rememberSession);

      if (success) {
        this.showNotification('Storage unlocked successfully', 'success');
        this.hide();
        
        // Restore routing context after successful unlock
        this.restoreRoutingContext();

        // Call unlock callback if provided
        if (this.onUnlockCallback) {
          this.onUnlockCallback();
        }
      } else {
        this.showError('Invalid password. Please try again.');
        this.passwordInput.focus();
        this.passwordInput.select();
      }
    } catch (error) {
      console.error('Unlock failed:', error);
      this.showError('Unlock failed. Please try again.');
    } finally {
      this.setLoading(false);
    }
  }

  private showError(message: string) {
    if (!this.errorDiv) return;
    this.errorDiv.textContent = message;
    this.errorDiv.classList.remove('hidden');
  }

  private clearError() {
    if (!this.errorDiv) return;
    this.errorDiv.classList.add('hidden');
  }

  private resetForm() {
    if (!this.form || !this.passwordInput) return;
    this.form.reset();
    this.clearError();
    this.setLoading(false);
    this.passwordInput.type = 'password';
    
    // Reset the toggle button icon to show eye (password hidden state)
    const svg = this.toggleBtn?.querySelector('svg');
    if (svg) {
      svg.innerHTML = '<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"/><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"/>';
    }
  }

  private setLoading(loading: boolean) {
    if (!this.submitBtn) return;
    
    const submitText = document.getElementById('unlock-submit-text');
    
    if (loading) {
      this.submitBtn.classList.add('loading');
      (this.submitBtn as HTMLButtonElement).disabled = true;
      if (submitText) submitText.textContent = 'Unlocking...';
    } else {
      this.submitBtn.classList.remove('loading');
      (this.submitBtn as HTMLButtonElement).disabled = false;
      if (submitText) submitText.textContent = 'Unlock';
    }
  }

  private startCountdownMonitoring() {
    if (!this.secureStorage?.getTimeUntilAutoLock) return;

    this.countdownInterval = window.setInterval(() => {
      const timeRemaining = this.secureStorage.getTimeUntilAutoLock();
      
      if (timeRemaining <= 0) {
        this.stopCountdown();
        return;
      }

      // Show warning when less than 5 minutes remain
      if (timeRemaining <= 300) { // 5 minutes
        this.showAutoLockWarning(timeRemaining);
      }
    }, 1000);
  }

  private showAutoLockWarning(seconds: number) {
    if (!this.lockStatusIndicator || !this.lockCountdown) return;

    const minutes = Math.floor(seconds / 60);
    const remainingSeconds = seconds % 60;
    const timeText = minutes > 0 
      ? `${minutes}:${remainingSeconds.toString().padStart(2, '0')}`
      : `${remainingSeconds}s`;

    this.lockCountdown.textContent = `Auto-lock in ${timeText}`;
    this.lockCountdown.classList.remove('hidden');
    this.lockStatusIndicator.classList.remove('hidden');
    this.lockStatusIndicator.classList.add('warning');
  }

  private stopCountdown() {
    if (this.countdownInterval) {
      clearInterval(this.countdownInterval);
      this.countdownInterval = null;
    }
    
    if (this.lockCountdown) {
      this.lockCountdown.classList.add('hidden');
    }
  }

  private updateLockStatus(_isLocked: boolean) {
    // This method was referenced but not implemented
    // Implementation depends on UI requirements
  }

  private showNotification(message: string, type: 'success' | 'error' | 'info' = 'info') {
    // Use existing notification system if available
    const app = (window as any).smileApp;
    if (app && typeof app.showCustomNotification === 'function') {
      app.showCustomNotification(message, type);
    } else {
      console.log(`${type.toUpperCase()}: ${message}`);
    }
  }
}

// Initialize when DOM is loaded
document.addEventListener('DOMContentLoaded', () => {
  const inst = new EnhancedSecurityUnlockModal();
  (window as any).securityUnlockModal = inst;
});
</script>
