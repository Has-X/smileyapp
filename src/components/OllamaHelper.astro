---
// Ollama Setup Helper Component - Standalone helper for setting up Ollama
---

<div id="ollama-helper" class="ollama-helper">
  <div class="ollama-status" id="ollama-status">
    <div class="status-icon" id="status-icon">
      <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"/>
      </svg>
    </div>
    <div class="status-content">
      <h3 class="status-title" id="status-title">Checking Ollama Connection...</h3>
      <p class="status-message" id="status-message">Please wait while we check your Ollama installation.</p>
    </div>
  </div>

  <!-- Connection Success State -->
  <div class="ollama-connected hidden" id="ollama-connected">
    <div class="connection-success">
      <svg class="w-8 h-8" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"/>
      </svg>
      <h3>Ollama Connected Successfully!</h3>
      <p>Found <span id="model-count">0</span> models available</p>
    </div>
    
    <div class="model-list" id="model-list">
      <!-- Models will be populated here -->
    </div>
    
    <div class="ollama-actions">
      <button class="btn-outlined" onclick="refreshModels()">
        <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"/>
        </svg>
        Refresh Models
      </button>
      
      <button class="btn-primary" onclick="downloadRecommendedModel()" id="download-recommended" style="display: none;">
        <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16v1a3 3 0 003 3h10a3 3 0 003-3v-1m-4-4l-4 4m0 0l-4-4m4 4V4"/>
        </svg>
        Download Recommended Model
      </button>
    </div>
  </div>

  <!-- Setup Instructions -->
  <div class="ollama-setup" id="ollama-setup">
    <div class="setup-tabs">
      <button class="tab-btn active" data-os="windows">
        <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 24 24">
          <path d="M0,0V11.4L9.8,10.3V0ZM11.3,0V10.1L24,8.4V0ZM0,12.9V24L9.8,22.9V12.9ZM11.3,12.9V22.7L24,24V12.9Z"/>
        </svg>
        Windows
      </button>
      <button class="tab-btn" data-os="mac">
        <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 24 24">
          <path d="M18.71,19.5C17.88,20.74 17,21.95 15.66,21.97C14.32,22 13.89,21.18 12.37,21.18C10.84,21.18 10.37,21.95 9.1,22C7.79,22.05 6.8,20.68 5.96,19.47C4.25,17 2.94,12.45 4.7,9.39C5.57,7.87 7.13,6.91 8.82,6.88C10.1,6.86 11.32,7.75 12.11,7.75C12.89,7.75 14.37,6.68 15.92,6.84C16.57,6.87 18.39,7.1 19.56,8.82C19.47,8.88 17.39,10.1 17.41,12.63C17.44,15.65 20.06,16.66 20.09,16.67C20.06,16.74 19.67,18.11 18.71,19.5M13,3.5C13.73,2.67 14.94,2.04 15.94,2C16.07,3.17 15.6,4.35 14.9,5.19C14.21,6.04 13.07,6.7 11.95,6.61C11.8,5.46 12.36,4.26 13,3.5Z"/>
        </svg>
        macOS
      </button>
      <button class="tab-btn" data-os="linux">
        <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 24 24">
          <path d="M12.504 0c-.155 0-.315.008-.480.021-4.226.333-3.105 4.807-3.17 6.298-.076 1.092-.3 1.953-1.05 3.02-.885 1.051-2.127 2.75-2.716 4.521-.278.832-.41 1.684-.287 2.489a.424.424 0 00-.11.135c-.26.268-.45.6-.663.839-.199.199-.485.267-.797.4-.313.136-.658.269-.864.68-.09.189-.136.394-.132.602 0 .199.027.4.055.536.058.399.116.728.04.97-.249.68-.28 1.145-.106 1.484.174.334.535.47.94.601.81.2 1.91.135 2.774.6.926.466 1.866.67 2.616.47.526-.116.97-.464 1.208-.946.587-.003 1.23-.269 2.26-.334.699-.058 1.574.267 2.577.2.025.134.063.198.114.333l.003.003c.391.778 1.113 1.132 1.884 1.071.771-.06 1.592-.536 2.257-1.306.631-.765 1.683-1.084 2.378-1.503.348-.199.629-.469.649-.853.023-.4-.2-.811-.714-1.376v-.097l-.003-.003c-.17-.2-.25-.535-.338-.926-.085-.401-.182-.786-.492-1.046h-.003c-.059-.054-.123-.067-.188-.135a.357.357 0 00-.19-.064c.431-1.278.264-2.55-.173-3.694-.533-1.41-1.465-2.638-2.175-3.483-.796-1.005-1.576-1.957-1.56-3.368.026-2.152.236-6.133-3.544-6.139zm.529 3.405h.013c.213 0 .396.062.584.198.19.135.33.332.438.533.105.259.158.459.166.724 0-.02.006-.04.006-.06v.105a.086.086 0 01-.004-.021l-.004-.024a1.807 1.807 0 01-.15.706.953.953 0 01-.213.335.71.71 0 00-.088-.042c-.104-.045-.198-.064-.284-.133a1.312 1.312 0 00-.22-.066c.05-.06.146-.133.183-.198.053-.128.082-.264.088-.402v-.02a1.21 1.21 0 00-.061-.4c-.045-.134-.101-.2-.183-.333-.084-.066-.167-.132-.267-.132h-.016c-.093 0-.176.03-.262.132a.8.8 0 00-.205.334 1.18 1.18 0 00-.09.4v.019c.002.089.008.179.02.267-.193-.067-.438-.135-.607-.202a1.635 1.635 0 01-.018-.2v-.02a1.772 1.772 0 01.15-.768c.082-.22.232-.406.43-.533a.985.985 0 01.594-.2zm-2.962.059h.036c.142 0 .27.048.399.135.146.129.264.288.344.465.09.199.14.4.153.667v.004c.007.134.006.2-.002.266v.08c-.03.007-.056.018-.083.024-.152.055-.274.135-.393.2.012-.09.013-.18.003-.267v-.015c-.012-.133-.04-.2-.082-.333a.613.613 0 00-.166-.267.248.248 0 00-.183-.064h-.021c-.071.006-.13.04-.186.132a.552.552 0 00-.12.27.944.944 0 00-.023.33v.015c.012.135.037.2.08.334.046.134.098.2.166.268.01.009.02.018.034.024-.07.057-.117.07-.176.136a.304.304 0 01-.131.068 2.62 2.62 0 01-.275-.402 1.772 1.772 0 01-.155-.667 1.759 1.759 0 01.08-.668 1.43 1.43 0 01.283-.535c.128-.133.26-.2.418-.2zm1.37 1.706c.332 0 .733.065 1.216.399.293.2.523.269 1.052.468h.003c.255.136.405.266.478.399v-.131a.571.571 0 01.016.47c-.123.31-.516.643-1.063.842v.002c-.268.135-.501.333-.775.465-.276.135-.588.292-1.012.267a1.139 1.139 0 01-.448-.067 3.566 3.566 0 01-.322-.198c-.195-.135-.363-.332-.612-.465v-.005h-.005c-.4-.246-.616-.512-.686-.71-.07-.268-.005-.47.193-.6.224-.135.38-.271.483-.336.104-.074.143-.102.25-.131h.002c.107-.066.178-.135.287-.2.11-.066.245-.131.398-.131z"/>
        </svg>
        Linux
      </button>
    </div>

    <!-- Windows Instructions -->
    <div class="setup-content active" data-os="windows">
      <div class="instruction-step">
        <div class="step-number">1</div>
        <div class="step-content">
          <h4>Download Ollama</h4>
          <p>Download the Ollama installer for Windows from the official website.</p>
          <a href="https://ollama.ai/download/windows" target="_blank" class="btn-primary download-btn">
            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16v1a3 3 0 003 3h10a3 3 0 003-3v-1m-4-4l-4 4m0 0l-4-4m4 4V4"/>
            </svg>
            Download for Windows
          </a>
        </div>
      </div>

      <div class="instruction-step">
        <div class="step-number">2</div>
        <div class="step-content">
          <h4>Install Ollama</h4>
          <p>Run the installer and follow the setup wizard. Ollama will start automatically after installation.</p>
        </div>
      </div>

      <div class="instruction-step">
        <div class="step-number">3</div>
        <div class="step-content">
          <h4>Download a Model</h4>
          <p>Open Command Prompt or PowerShell and run:</p>
          <div class="code-block">
            <code>ollama pull llama3.2</code>
            <button class="copy-btn" onclick="copyToClipboard('ollama pull llama3.2')">
              <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 16H6a2 2 0 01-2-2V6a2 2 0 012-2h8a2 2 0 012 2v2m-6 12h8a2 2 0 002-2v-8a2 2 0 00-2-2h-8a2 2 0 00-2 2v8a2 2 0 002 2z"/>
              </svg>
            </button>
          </div>
        </div>
      </div>
    </div>

    <!-- macOS Instructions -->
    <div class="setup-content" data-os="mac">
      <div class="instruction-step">
        <div class="step-number">1</div>
        <div class="step-content">
          <h4>Download Ollama</h4>
          <p>Download the Ollama installer for macOS from the official website.</p>
          <a href="https://ollama.ai/download/mac" target="_blank" class="btn-primary download-btn">
            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16v1a3 3 0 003 3h10a3 3 0 003-3v-1m-4-4l-4 4m0 0l-4-4m4 4V4"/>
            </svg>
            Download for macOS
          </a>
        </div>
      </div>

      <div class="instruction-step">
        <div class="step-number">2</div>
        <div class="step-content">
          <h4>Install Ollama</h4>
          <p>Open the downloaded .dmg file and drag Ollama to your Applications folder. Then launch Ollama from Applications.</p>
        </div>
      </div>

      <div class="instruction-step">
        <div class="step-number">3</div>
        <div class="step-content">
          <h4>Download a Model</h4>
          <p>Open Terminal and run:</p>
          <div class="code-block">
            <code>ollama pull llama3.2</code>
            <button class="copy-btn" onclick="copyToClipboard('ollama pull llama3.2')">
              <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 16H6a2 2 0 01-2-2V6a2 2 0 012-2h8a2 2 0 012 2v2m-6 12h8a2 2 0 002-2v-8a2 2 0 00-2-2h-8a2 2 0 00-2 2v8a2 2 0 002 2z"/>
              </svg>
            </button>
          </div>
        </div>
      </div>
    </div>

    <!-- Linux Instructions -->
    <div class="setup-content" data-os="linux">
      <div class="instruction-step">
        <div class="step-number">1</div>
        <div class="step-content">
          <h4>Install Ollama</h4>
          <p>Run the installation script in your terminal:</p>
          <div class="code-block">
            <code>curl -fsSL https://ollama.ai/install.sh | sh</code>
            <button class="copy-btn" onclick="copyToClipboard('curl -fsSL https://ollama.ai/install.sh | sh')">
              <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 16H6a2 2 0 01-2-2V6a2 2 0 012-2h8a2 2 0 012 2v2m-6 12h8a2 2 0 002-2v-8a2 2 0 00-2-2h-8a2 2 0 00-2 2v8a2 2 0 002 2z"/>
              </svg>
            </button>
          </div>
        </div>
      </div>

      <div class="instruction-step">
        <div class="step-number">2</div>
        <div class="step-content">
          <h4>Start Ollama Service</h4>
          <p>Start the Ollama service:</p>
          <div class="code-block">
            <code>systemctl --user start ollama</code>
            <button class="copy-btn" onclick="copyToClipboard('systemctl --user start ollama')">
              <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 16H6a2 2 0 01-2-2V6a2 2 0 012-2h8a2 2 0 012 2v2m-6 12h8a2 2 0 002-2v-8a2 2 0 00-2-2h-8a2 2 0 00-2 2v8a2 2 0 002 2z"/>
              </svg>
            </button>
          </div>
        </div>
      </div>

      <div class="instruction-step">
        <div class="step-number">3</div>
        <div class="step-content">
          <h4>Download a Model</h4>
          <p>Download a recommended model:</p>
          <div class="code-block">
            <code>ollama pull llama3.2</code>
            <button class="copy-btn" onclick="copyToClipboard('ollama pull llama3.2')">
              <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 16H6a2 2 0 01-2-2V6a2 2 0 012-2h8a2 2 0 012 2v2m-6 12h8a2 2 0 002-2v-8a2 2 0 00-2 2v8a2 2 0 002 2z"/>
              </svg>
            </button>
          </div>
        </div>
      </div>
    </div>

    <div class="setup-footer">
      <button class="btn-primary" onclick="checkOllamaConnection()">
        <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"/>
        </svg>
        Check Connection
      </button>
      
      <p class="setup-help">
        Need help? Visit the <a href="https://ollama.ai/docs" target="_blank">Ollama documentation</a> or 
        <a href="#" onclick="showTroubleshooting()">troubleshooting guide</a>.
      </p>
    </div>
  </div>

  <!-- Troubleshooting Section -->
  <div class="troubleshooting hidden" id="troubleshooting">
    <h3>Troubleshooting</h3>
    
    <div class="trouble-item">
      <h4>Ollama service not running</h4>
      <p>Make sure Ollama is running in the background. Try restarting the application or running <code>ollama serve</code> in your terminal.</p>
    </div>
    
    <div class="trouble-item">
      <h4>Connection refused</h4>
      <p>Check if Ollama is running on the default port (11434). You can verify this by visiting <a href="http://localhost:11434" target="_blank">http://localhost:11434</a> in your browser.</p>
    </div>
    
    <div class="trouble-item">
      <h4>No models found</h4>
      <p>You need to download at least one model. Try running <code>ollama pull llama3.2</code> in your terminal.</p>
    </div>
    
    <div class="trouble-item">
      <h4>Slow performance</h4>
      <p>Consider using a smaller model like <code>llama3.2:1b</code> if you have limited RAM or processing power.</p>
    </div>
  </div>
</div>

<style>
.ollama-helper {
  width: 100%;
  max-width: 600px;
  margin: 0 auto;
}

.ollama-status {
  display: flex;
  align-items: center;
  gap: 1rem;
  padding: 1.5rem;
  background: rgba(var(--md-surface-container), 0.5);
  border: 1px solid rgba(var(--md-outline-variant), 0.3);
  border-radius: 1rem;
  margin-bottom: 1.5rem;
}

.status-icon {
  width: 3rem;
  height: 3rem;
  background: rgba(var(--md-primary), 0.1);
  border-radius: 0.75rem;
  display: flex;
  align-items: center;
  justify-content: center;
  color: rgb(var(--md-primary));
  animation: pulse 2s infinite;
}

@keyframes pulse {
  0%, 100% { opacity: 1; }
  50% { opacity: 0.5; }
}

.status-content h3 {
  margin: 0 0 0.25rem 0;
  font-size: 1.1rem;
  font-weight: 600;
  color: rgb(var(--md-on-surface));
}

.status-content p {
  margin: 0;
  font-size: 0.875rem;
  color: rgb(var(--md-on-surface-variant));
  opacity: 0.8;
}

.connection-success {
  text-align: center;
  padding: 2rem;
  background: rgba(var(--md-success-container), 0.1);
  border: 1px solid rgba(var(--md-success), 0.2);
  border-radius: 1rem;
  margin-bottom: 1.5rem;
}

.connection-success svg {
  color: rgb(var(--md-success));
  margin-bottom: 1rem;
}

.connection-success h3 {
  margin: 0 0 0.5rem 0;
  color: rgb(var(--md-on-surface));
  font-size: 1.25rem;
  font-weight: 600;
}

.connection-success p {
  margin: 0;
  color: rgb(var(--md-on-surface-variant));
  font-size: 0.875rem;
}

.model-list {
  background: rgba(var(--md-surface-container), 0.3);
  border: 1px solid rgba(var(--md-outline-variant), 0.2);
  border-radius: 0.75rem;
  padding: 1rem;
  margin-bottom: 1.5rem;
}

.model-item {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 0.75rem 0;
  border-bottom: 1px solid rgba(var(--md-outline-variant), 0.1);
}

.model-item:last-child {
  border-bottom: none;
}

.model-info h4 {
  margin: 0 0 0.25rem 0;
  font-size: 0.95rem;
  font-weight: 600;
  color: rgb(var(--md-on-surface));
}

.model-info p {
  margin: 0;
  font-size: 0.8rem;
  color: rgb(var(--md-on-surface-variant));
  opacity: 0.7;
}

.setup-tabs {
  display: flex;
  gap: 0.5rem;
  margin-bottom: 1.5rem;
}

.tab-btn {
  flex: 1;
  padding: 0.75rem 1rem;
  background: rgba(var(--md-surface-variant), 0.5);
  border: 1px solid rgba(var(--md-outline-variant), 0.3);
  border-radius: 0.5rem;
  color: rgb(var(--md-on-surface-variant));
  cursor: pointer;
  display: flex;
  align-items: center;
  justify-content: center;
  gap: 0.5rem;
  font-size: 0.875rem;
  font-weight: 500;
  transition: all 0.2s ease;
}

.tab-btn:hover {
  background: rgba(var(--md-surface-variant), 0.7);
}

.tab-btn.active {
  background: rgb(var(--md-primary));
  color: rgb(var(--md-on-primary));
  border-color: rgb(var(--md-primary));
}

.setup-content {
  display: none;
}

.setup-content.active {
  display: block;
}

.instruction-step {
  display: flex;
  gap: 1rem;
  margin-bottom: 2rem;
}

.step-number {
  width: 2rem;
  height: 2rem;
  background: rgb(var(--md-primary));
  color: rgb(var(--md-on-primary));
  border-radius: 50%;
  display: flex;
  align-items: center;
  justify-content: center;
  font-weight: 600;
  font-size: 0.875rem;
  flex-shrink: 0;
}

.step-content {
  flex: 1;
}

.step-content h4 {
  margin: 0 0 0.5rem 0;
  font-size: 1rem;
  font-weight: 600;
  color: rgb(var(--md-on-surface));
}

.step-content p {
  margin: 0 0 1rem 0;
  font-size: 0.875rem;
  color: rgb(var(--md-on-surface-variant));
  line-height: 1.5;
}

.code-block {
  position: relative;
  background: rgba(var(--md-surface-container-highest), 0.8);
  border: 1px solid rgba(var(--md-outline-variant), 0.3);
  border-radius: 0.5rem;
  padding: 1rem;
  font-family: 'Monaco', 'Menlo', 'Ubuntu Mono', monospace;
  font-size: 0.85rem;
  margin: 1rem 0;
}

.code-block code {
  color: rgb(var(--md-on-surface));
}

.copy-btn {
  position: absolute;
  top: 0.5rem;
  right: 0.5rem;
  background: rgba(var(--md-surface), 0.9);
  border: 1px solid rgba(var(--md-outline-variant), 0.3);
  border-radius: 0.25rem;
  padding: 0.5rem;
  color: rgb(var(--md-on-surface-variant));
  cursor: pointer;
  transition: all 0.2s ease;
}

.copy-btn:hover {
  background: rgba(var(--md-surface-variant), 0.8);
  color: rgb(var(--md-on-surface));
}

.download-btn {
  display: inline-flex;
  align-items: center;
  gap: 0.5rem;
}

.ollama-actions {
  display: flex;
  gap: 1rem;
  margin-top: 1.5rem;
}

.setup-footer {
  text-align: center;
  margin-top: 2rem;
  padding-top: 1.5rem;
  border-top: 1px solid rgba(var(--md-outline-variant), 0.2);
}

.setup-help {
  margin-top: 1rem;
  font-size: 0.875rem;
  color: rgb(var(--md-on-surface-variant));
}

.setup-help a {
  color: rgb(var(--md-primary));
  text-decoration: none;
}

.setup-help a:hover {
  text-decoration: underline;
}

.troubleshooting {
  margin-top: 2rem;
  padding: 1.5rem;
  background: rgba(var(--md-warning-container), 0.1);
  border: 1px solid rgba(var(--md-warning), 0.2);
  border-radius: 1rem;
}

.troubleshooting h3 {
  margin: 0 0 1rem 0;
  color: rgb(var(--md-on-surface));
  font-size: 1.1rem;
  font-weight: 600;
}

.trouble-item {
  margin-bottom: 1.5rem;
}

.trouble-item:last-child {
  margin-bottom: 0;
}

.trouble-item h4 {
  margin: 0 0 0.5rem 0;
  font-size: 0.95rem;
  font-weight: 600;
  color: rgb(var(--md-on-surface));
}

.trouble-item p {
  margin: 0;
  font-size: 0.875rem;
  color: rgb(var(--md-on-surface-variant));
  line-height: 1.5;
}

.trouble-item code {
  background: rgba(var(--md-surface-container-highest), 0.8);
  padding: 0.25rem 0.5rem;
  border-radius: 0.25rem;
  font-family: 'Monaco', 'Menlo', 'Ubuntu Mono', monospace;
  font-size: 0.8rem;
}

.hidden {
  display: none !important;
}
</style>

<script>
class OllamaHelper {
  private statusIcon: HTMLElement | null = null;
  private statusTitle: HTMLElement | null = null;
  private statusMessage: HTMLElement | null = null;
  private ollamaConnected: HTMLElement | null = null;
  private ollamaSetup: HTMLElement | null = null;
  private modelCount: HTMLElement | null = null;
  private modelList: HTMLElement | null = null;

  constructor() {
    this.init();
  }

  private init() {
    this.statusIcon = document.getElementById('status-icon');
    this.statusTitle = document.getElementById('status-title');
    this.statusMessage = document.getElementById('status-message');
    this.ollamaConnected = document.getElementById('ollama-connected');
    this.ollamaSetup = document.getElementById('ollama-setup');
    this.modelCount = document.getElementById('model-count');
    this.modelList = document.getElementById('model-list');

    this.setupTabs();
    this.checkConnection();
  }

  private setupTabs() {
    const tabBtns = document.querySelectorAll('.tab-btn');
    const setupContents = document.querySelectorAll('.setup-content');

    tabBtns.forEach(btn => {
      btn.addEventListener('click', () => {
        const os = btn.getAttribute('data-os');
        
        // Update active tab
        tabBtns.forEach(b => b.classList.remove('active'));
        btn.classList.add('active');
        
        // Update active content
        setupContents.forEach(content => {
          content.classList.remove('active');
          if (content.getAttribute('data-os') === os) {
            content.classList.add('active');
          }
        });
      });
    });
  }

  private async checkConnection() {
    try {
      this.updateStatus('checking', 'Checking Ollama Connection...', 'Attempting to connect to Ollama...');
      
      const response = await fetch('http://localhost:11434/api/tags');
      
      if (response.ok) {
        const data = await response.json();
        this.showConnected(data.models || []);
      } else {
        throw new Error('Connection failed');
      }
    } catch (error) {
      this.showSetupInstructions();
    }
  }

  private updateStatus(type: string, title: string, message: string) {
    if (this.statusTitle) this.statusTitle.textContent = title;
    if (this.statusMessage) this.statusMessage.textContent = message;
    
    if (this.statusIcon) {
      const svg = this.statusIcon.querySelector('svg');
      if (svg) {
        if (type === 'success') {
          svg.innerHTML = '<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"/>';
          this.statusIcon.style.animation = 'none';
        } else if (type === 'error') {
          svg.innerHTML = '<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L4.082 16.5c-.77.833.192 2.5 1.732 2.5z"/>';
          this.statusIcon.style.animation = 'none';
        }
      }
    }
  }

  private showConnected(models: any[]) {
    this.updateStatus('success', 'Ollama Connected!', `Found ${models.length} models available`);
    
    if (this.ollamaConnected) this.ollamaConnected.classList.remove('hidden');
    if (this.ollamaSetup) this.ollamaSetup.classList.add('hidden');
    
    if (this.modelCount) this.modelCount.textContent = models.length.toString();
    
    this.populateModelList(models);
    
    // Show download button if no models
    const downloadBtn = document.getElementById('download-recommended');
    if (downloadBtn) {
      downloadBtn.style.display = models.length === 0 ? 'block' : 'none';
    }
  }

  private showSetupInstructions() {
    this.updateStatus('error', 'Ollama Not Found', 'Please install and start Ollama to continue');
    
    if (this.ollamaConnected) this.ollamaConnected.classList.add('hidden');
    if (this.ollamaSetup) this.ollamaSetup.classList.remove('hidden');
  }

  private populateModelList(models: any[]) {
    if (!this.modelList) return;
    
    if (models.length === 0) {
      this.modelList.innerHTML = '<p style="text-align: center; color: rgb(var(--md-on-surface-variant)); font-size: 0.875rem;">No models downloaded yet. Download a model to get started.</p>';
      return;
    }
    
    this.modelList.innerHTML = models.map(model => `
      <div class="model-item">
        <div class="model-info">
          <h4>${model.name}</h4>
          <p>Size: ${this.formatSize(model.size)} • Modified: ${this.formatDate(model.modified_at)}</p>
        </div>
        <button class="btn-outlined btn-sm" onclick="selectModel('${model.name}')">
          Select
        </button>
      </div>
    `).join('');
  }

  private formatSize(bytes: number): string {
    const sizes = ['B', 'KB', 'MB', 'GB', 'TB'];
    if (bytes === 0) return '0 B';
    const i = Math.floor(Math.log(bytes) / Math.log(1024));
    return Math.round(bytes / Math.pow(1024, i) * 100) / 100 + ' ' + sizes[i];
  }

  private formatDate(dateString: string): string {
    const date = new Date(dateString);
    return date.toLocaleDateString();
  }

  public async refreshModels() {
    await this.checkConnection();
  }
}

// Global functions
(window as any).checkOllamaConnection = function() {
  const helper = (window as any).ollamaHelper;
  if (helper) {
    helper.refreshModels();
  }
};

(window as any).refreshModels = function() {
  const helper = (window as any).ollamaHelper;
  if (helper) {
    helper.refreshModels();
  }
};

(window as any).selectModel = function(modelName: string) {
  // Update model selection in onboarding or settings
  const modelSelect = document.getElementById('onboarding-model-select') as HTMLSelectElement;
  if (modelSelect) {
    // Update select options
    const option = Array.from(modelSelect.options).find(opt => opt.value === modelName);
    if (option) {
      modelSelect.value = modelName;
    }
  }
  
  // Show success notification
  if ((window as any).smileApp) {
    (window as any).smileApp.showCustomNotification(`Selected model: ${modelName}`, 'success');
  }
};

(window as any).downloadRecommendedModel = function() {
  const code = 'ollama pull llama3.2';
  navigator.clipboard.writeText(code).then(() => {
    if ((window as any).smileApp) {
      (window as any).smileApp.showCustomNotification('Command copied to clipboard! Run it in your terminal.', 'info');
    }
  });
};

(window as any).copyToClipboard = function(text: string) {
  navigator.clipboard.writeText(text).then(() => {
    if ((window as any).smileApp) {
      (window as any).smileApp.showCustomNotification('Copied to clipboard!', 'success');
    }
  });
};

(window as any).showTroubleshooting = function() {
  const troubleshooting = document.getElementById('troubleshooting');
  if (troubleshooting) {
    troubleshooting.classList.toggle('hidden');
  }
};

// Initialize when DOM is loaded
document.addEventListener('DOMContentLoaded', () => {
  const helper = new OllamaHelper();
  (window as any).ollamaHelper = helper;
});
</script>
