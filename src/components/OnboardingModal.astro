---
// OnboardingModal.astro - Clean Material Design 3 Implementation with OllamaHelper Integration
import OllamaHelper from './OllamaHelper.astro';
---

<div id="onboarding-modal" class="global-modal" style="display: none;">
  <div class="global-modal-backdrop"></div>
  <div class="global-modal-container">
    <div class="global-modal-content onboarding-content">
      
      <!-- Progress Indicator -->
      <div class="progress-container">
        <div class="onboarding-progress-bar" role="progressbar" aria-valuemin="1" aria-valuemax="6" aria-valuenow="1">
          <div class="onboarding-progress-fill"></div>
        </div>
        <span class="onboarding-progress-text">Step 1 of 6</span>
      </div>

      <!-- Onboarding Steps -->
      <div class="onboarding-body">
        
        <!-- Step 1: Welcome -->
        <div class="step-content active" data-step="1">
          <div class="step-header">
            <div class="step-icon">
              <svg width="32" height="32" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <circle cx="12" cy="12" r="10"/>
                <path d="M8 14s1.5 2 4 2 4-2 4-2"/>
                <line x1="9" y1="9" x2="9.01" y2="9"/>
                <line x1="15" y1="9" x2="15.01" y2="9"/>
              </svg>
            </div>
            <h2>Welcome to Smiley</h2>
            <p>Your personal wellness companion powered by AI. Let's set up your experience in just a few steps.</p>
          </div>
          
          <div class="features-grid">
            <div class="feature-item">
              <div class="feature-icon">
                <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                  <path d="M21 11.5a8.38 8.38 0 0 1-.9 3.8 8.5 8.5 0 0 1-7.6 4.7 8.38 8.38 0 0 1-3.8-.9L3 21l1.9-5.7a8.38 8.38 0 0 1-.9-3.8 8.5 8.5 0 0 1 4.7-7.6 8.38 8.38 0 0 1 3.8-.9h.5a8.48 8.48 0 0 1 8 8v.5z"/>
                </svg>
              </div>
              <div>
                <h4>AI Chat Support</h4>
                <p>Talk to your AI companion anytime</p>
              </div>
            </div>
            <div class="feature-item">
              <div class="feature-icon">
                <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                  <path d="M4 19.5A2.5 2.5 0 0 1 6.5 17H20"/>
                  <path d="M6.5 2H20v20H6.5A2.5 2.5 0 0 1 4 19.5v-15A2.5 2.5 0 0 1 6.5 2z"/>
                  <path d="M8 7h8"/>
                  <path d="M8 11h8"/>
                  <path d="M8 15h6"/>
                </svg>
              </div>
              <div>
                <h4>Personal Journal</h4>
                <p>Track your thoughts and progress</p>
              </div>
            </div>
            <div class="feature-item">
              <div class="feature-icon">
                <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" aria-hidden="true">
                  <path d="M20.84 4.61a5.5 5.5 0 0 0-7.78 0L12 5.67l-1.06-1.06a5.5 5.5 0 0 0-7.78 7.78L12 21.23l8.84-8.84a5.5 5.5 0 0 0 0-7.78z"/>
                </svg>
              </div>
              <div>
                <h4>Wellness Tools</h4>
                <p>Mindfulness and relaxation exercises</p>
              </div>
            </div>
            <div class="feature-item">
              <div class="feature-icon">
                <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                  <rect x="3" y="11" width="18" height="11" rx="2" ry="2"/>
                  <circle cx="12" cy="16" r="1"/>
                  <path d="m7 11 0-3a5 5 0 0 1 10 0v3"/>
                </svg>
              </div>
              <div>
                <h4>Private & Secure</h4>
                <p>Your data stays safe on your device</p>
              </div>
            </div>
          </div>
        </div>

        <!-- Step 2: Theme Selection (Redesigned) -->
        <div class="step-content" data-step="2">
          <div class="step-header">
            <div class="step-icon">
              <svg width="32" height="32" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <circle cx="12" cy="12" r="5"/>
                <path d="M12 1v2"/>
                <path d="M12 21v2"/>
                <path d="M4.22 4.22l1.42 1.42"/>
                <path d="M18.36 18.36l1.42 1.42"/>
                <path d="M1 12h2"/>
                <path d="M21 12h2"/>
                <path d="M4.22 19.78l1.42-1.42"/>
                <path d="M18.36 5.64l1.42-1.42"/>
              </svg>
            </div>
            <h2>Choose Your Theme</h2>
            <p>Select your preferred appearance mode and accent color. Preview updates instantly.</p>
          </div>

          <div class="theme-mode-selection">
            <h3 class="mode-selection-title">Display Mode</h3>
            <div class="mode-chips">
              <button class="mode-chip selected" data-mode="auto" aria-label="Auto mode - follows system">
                <div class="mode-icon">
                  <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                    <circle cx="12" cy="12" r="5"/>
                    <path d="M12 1v2"/>
                    <path d="M12 21v2"/>
                    <path d="M4.22 4.22l1.42 1.42"/>
                    <path d="M18.36 18.36l1.42 1.42"/>
                    <path d="M1 12h2"/>
                    <path d="M21 12h2"/>
                    <path d="M4.22 19.78l1.42-1.42"/>
                    <path d="M18.36 5.64l1.42-1.42"/>
                  </svg>
                </div>
                <span class="mode-name">Auto</span>
                <span class="mode-desc">Follow system</span>
              </button>
              <button class="mode-chip" data-mode="light" aria-label="Light mode">
                <div class="mode-icon">
                  <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                    <circle cx="12" cy="12" r="5"/>
                    <path d="M12 1v2"/>
                    <path d="M12 21v2"/>
                    <path d="M4.22 4.22l1.42 1.42"/>
                    <path d="M18.36 18.36l1.42 1.42"/>
                    <path d="M1 12h2"/>
                    <path d="M21 12h2"/>
                    <path d="M4.22 19.78l1.42-1.42"/>
                    <path d="M18.36 5.64l1.42-1.42"/>
                  </svg>
                </div>
                <span class="mode-name">Light</span>
                <span class="mode-desc">Always light</span>
              </button>
              <button class="mode-chip" data-mode="dark" aria-label="Dark mode">
                <div class="mode-icon">
                  <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                    <path d="M21 12.79A9 9 0 1 1 11.21 3 7 7 0 0 0 21 12.79z"/>
                  </svg>
                </div>
                <span class="mode-name">Dark</span>
                <span class="mode-desc">Always dark</span>
              </button>
            </div>
          </div>

          <div class="theme-live-preview" id="theme-live-preview">
            <div class="tlp-header"></div>
            <div class="tlp-body">
              <div class="tlp-card tlp-card-lg"></div>
              <div class="tlp-card tlp-card-sm"></div>
            </div>
          </div>

          <div class="accent-color-selection">
            <h3 class="accent-selection-title">Accent Color</h3>
            <div class="themes-grid compact">
            <button class="theme-chip" data-theme="smile" aria-label="Select Smile Blue theme">
              <span class="chip-bg smile-theme"></span>
              <span class="chip-outline"></span>
              <span class="chip-name">Smile Blue</span>
            </button>
            <button class="theme-chip" data-theme="forest" aria-label="Select Forest Green theme">
              <span class="chip-bg forest-theme"></span>
              <span class="chip-outline"></span>
              <span class="chip-name">Forest Green</span>
            </button>
            <button class="theme-chip" data-theme="sunset" aria-label="Select Sunset Orange theme">
              <span class="chip-bg sunset-theme"></span>
              <span class="chip-outline"></span>
              <span class="chip-name">Sunset Orange</span>
            </button>
            <button class="theme-chip" data-theme="lavender" aria-label="Select Lavender Purple theme">
              <span class="chip-bg lavender-theme"></span>
              <span class="chip-outline"></span>
              <span class="chip-name">Lavender Purple</span>
            </button>
            </div>
          </div>
        </div>

        <!-- Step 3: Security Settings -->
        <div class="step-content" data-step="3">
          <div class="step-header">
            <div class="step-icon">
              <svg width="32" height="32" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <rect x="3" y="11" width="18" height="11" rx="2" ry="2"/>
                <circle cx="12" cy="16" r="1"/>
                <path d="m7 11 0-3a5 5 0 0 1 10 0v3"/>
              </svg>
            </div>
            <h2>Secure Your Data</h2>
            <p>Protect your conversations and journal entries with encryption. This secures your local storage (your browser's localStorage/IndexedDB) on this device only — nothing is sent anywhere.</p>
          </div>

          <div class="security-options">
            <div class="security-card">
              <div class="security-header">
                <div class="security-icon">
                  <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                    <rect x="3" y="11" width="18" height="11" rx="2" ry="2"/>
                    <circle cx="12" cy="16" r="1"/>
                    <path d="m7 11 0-3a5 5 0 0 1 10 0v3"/>
                  </svg>
                </div>
                <div class="security-details">
                  <h4>Enable Local Data Encryption</h4>
                  <p>Encrypts your data in your browser's local storage so only your password can unlock it</p>
                </div>
                <div class="security-toggle">
                  <input type="checkbox" id="onboarding-encryption" class="toggle-input">
                  <label for="onboarding-encryption" class="toggle-label">
                    <span class="toggle-track">
                      <span class="toggle-thumb"></span>
                    </span>
                  </label>
                </div>
              </div>
            </div>

            <div class="security-info">
              <div class="info-item">
                <span class="info-icon">
                  <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                    <rect x="3" y="11" width="18" height="11" rx="2" ry="2"/>
                    <circle cx="12" cy="16" r="1"/>
                    <path d="m7 11 0-3a5 5 0 0 1 10 0v3"/>
                  </svg>
                </span>
                <span>Encrypts data in your browser's local storage using AES-256</span>
              </div>
              <div class="info-item">
                <span class="info-icon">
                  <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                    <rect x="2" y="3" width="20" height="14" rx="2" ry="2"/>
                    <line x1="8" y1="21" x2="16" y2="21"/>
                    <line x1="12" y1="17" x2="12" y2="21"/>
                  </svg>
                </span>
                <span>Data never leaves your device - stored locally only</span>
              </div>
              <div class="info-item">
                <span class="info-icon">
                  <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                    <path d="M15 7a2 2 0 012 2m4 0a6 6 0 01-7.743 5.743L11 17H9v2H7v2H4a1 1 0 01-1-1v-2.586a1 1 0 01.293-.707l5.964-5.964A6 6 0 1121 9z"/>
                  </svg>
                </span>
                <span>You control your encryption password</span>
              </div>
            </div>

            <div class="security-note">
              <div class="note-content">
                <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                  <circle cx="12" cy="12" r="10"/>
                  <path d="M12 16v-4"/>
                  <path d="M12 8h.01"/>
                </svg>
                <p><strong>Optional:</strong> You can enable encryption later in settings. If enabled now, you'll set up your password after onboarding.</p>
              </div>
            </div>
          </div>
        </div>

        <!-- Step 4: Profile Setup -->
        <div class="step-content" data-step="4">
          <div class="step-header">
            <div class="step-icon">
              <svg width="32" height="32" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <path d="M20 21v-2a4 4 0 0 0-4-4H8a4 4 0 0 0-4 4v2"/>
                <circle cx="12" cy="7" r="4"/>
              </svg>
            </div>
            <h2>Tell Me About Yourself</h2>
            <p>Help me provide better support by sharing a bit about yourself. All information is optional and private.</p>
          </div>

          <div class="profile-form">
            <div class="form-group">
              <label for="onboarding-name" class="form-label">What should I call you?</label>
              <input type="text" id="onboarding-name" class="form-input" placeholder="Your preferred name" maxlength="50">
            </div>

            <div class="form-group">
              <label for="onboarding-goals" class="form-label">What would you like to work on?</label>
              <textarea id="onboarding-goals" class="form-textarea" placeholder="Tell me about your wellness goals, challenges, or what brings you here..." rows="4" maxlength="500"></textarea>
              <div class="char-counter">
                <span class="char-count">0</span>/500 characters
              </div>
            </div>

            <div class="profile-note">
              <div class="note-content">
                <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                  <rect x="3" y="11" width="18" height="11" rx="2" ry="2"/>
                  <circle cx="12" cy="16" r="1"/>
                  <path d="m7 11 0-3a5 5 0 0 1 10 0v3"/>
                </svg>
                <p><strong>Privacy First:</strong> This information helps personalize your experience but is completely optional. You can update it anytime in your profile.</p>
              </div>
            </div>
          </div>
        </div>

        <!-- Step 5: AI Engine Setup - Using OllamaHelper Component -->
        <div class="step-content" data-step="5">
          <div class="step-header">
            <div class="step-icon">
              <svg width="32" height="32" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <path d="M9.5 2A2.5 2.5 0 0 1 12 4.5v15a2.5 2.5 0 0 1-4.96.44 2.07 2.07 0 0 1-2.44-2.44 2.5 2.5 0 0 1 0-4.92 2.5 2.5 0 0 1 0-4.92 2.5 2.5 0 0 1 0-4.92A2.5 2.5 0 0 1 9.5 2Z"/>
                <path d="M14.5 2A2.5 2.5 0 0 0 12 4.5v15a2.5 2.5 0 0 0 4.96.44 2.07 2.07 0 0 0 2.44-2.44 2.5 2.5 0 0 0 0-4.92 2.5 2.5 0 0 0 0-4.92 2.5 2.5 0 0 0 0-4.92A2.5 2.5 0 0 0 14.5 2Z"/>
              </svg>
            </div>
            <h2>AI Engine Setup</h2>
            <p>Connect with Ollama to enhance your AI capabilities. This powerful local AI engine provides private, secure conversations.</p>
          </div>

          <div class="ai-setup-container">
            <OllamaHelper />
            
            <!-- Skip Option -->
            <div class="skip-option">
              <div class="skip-content">
                <svg width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                  <circle cx="12" cy="12" r="10"/>
                  <path d="M12 16v-4"/>
                  <path d="M12 8h.01"/>
                </svg>
                <p><strong>Optional Setup:</strong> You can skip this step and configure AI later in settings. Smiley works great with basic features even without the AI engine.</p>
              </div>
            </div>
          </div>
        </div>

        <!-- Step 6: Welcome & Completion -->
        <div class="step-content" data-step="6">
          <div class="step-header">
            <div class="completion-icon-container">
              <div class="completion-icon-bg">
                <svg width="32" height="32" viewBox="0 0 24 24" fill="none" class="completion-icon">
                  <path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2z" fill="currentColor" opacity="0.1"/>
                  <circle cx="12" cy="12" r="10" stroke="currentColor" stroke-width="1.5" fill="none"/>
                  <path d="M8 14.5s1.5 2.5 4 2.5 4-2.5 4-2.5" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" fill="none"/>
                  <circle cx="9" cy="9" r="1.5" fill="currentColor"/>
                  <circle cx="15" cy="9" r="1.5" fill="currentColor"/>
                </svg>
              </div>
            </div>
            <div class="completion-header">
              <h2>Welcome to Your Wellness Space</h2>
              <p class="completion-subtitle">Everything is set up and ready for you</p>
            </div>
          </div>

          <div class="completion-content">
            <!-- Welcome Message -->
            <div class="welcome-section">
              <div class="welcome-card">
                <h3>We're here to support you</h3>
                <p>SmileyApp is designed to be a gentle companion on your wellness journey. Whether you need someone to listen, want to reflect through journaling, or explore mindfulness exercises, we're here to help in whatever way feels right for you.</p>
              </div>
            </div>

            <!-- What You Can Do -->
            <div class="features-section">
              <h3 class="section-title">What you can do</h3>
              <div class="feature-cards">
                <div class="feature-card">
                  <div class="feature-icon">
                    <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                      <path d="M21 11.5a8.38 8.38 0 0 1-.9 3.8 8.5 8.5 0 0 1-7.6 4.7 8.38 8.38 0 0 1-3.8-.9L3 21l1.9-5.7a8.38 8.38 0 0 1-.9-3.8 8.5 8.5 0 0 1 4.7-7.6 8.38 8.38 0 0 1 3.8-.9h.5a8.48 8.48 0 0 1 8 8v.5z"/>
                    </svg>
                  </div>
                  <div class="feature-content">
                    <span class="feature-title">Chat & Reflect</span>
                    <span class="feature-desc">Have conversations whenever you need support</span>
                  </div>
                </div>
                
                <div class="feature-card">
                  <div class="feature-icon">
                    <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                      <path d="M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z"/>
                      <polyline points="14,2 14,8 20,8"/>
                      <line x1="16" y1="13" x2="8" y2="13"/>
                      <line x1="16" y1="17" x2="8" y2="17"/>
                    </svg>
                  </div>
                  <div class="feature-content">
                    <span class="feature-title">Personal Journal</span>
                    <span class="feature-desc">Write down thoughts and track your progress</span>
                  </div>
                </div>
                
                <div class="feature-card">
                  <div class="feature-icon">
                    <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                      <path d="M20.84 4.61a5.5 5.5 0 0 0-7.78 0L12 5.67l-1.06-1.06a5.5 5.5 0 0 0-7.78 7.78L12 21.23l8.84-8.84a5.5 5.5 0 0 0 0-7.78z"/>
                    </svg>
                  </div>
                  <div class="feature-content">
                    <span class="feature-title">Wellness Exercises</span>
                    <span class="feature-desc">Explore mindfulness and relaxation tools</span>
                  </div>
                </div>
              </div>
            </div>

            <!-- Important Notes -->
            <div class="notes-section">
              <h3 class="section-title">Important to know</h3>
              <div class="note-cards">
                <div class="note-card privacy-note">
                  <div class="note-icon">
                    <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                      <rect x="3" y="11" width="18" height="11" rx="2" ry="2"/>
                      <circle cx="12" cy="16" r="1" fill="currentColor"/>
                      <path d="M7 11V7a5 5 0 0 1 10 0v4"/>
                    </svg>
                  </div>
                  <div class="note-content">
                    <h4>100% Private & Offline</h4>
                    <p>Everything stays on your device. No data is sent anywhere, no analytics, no tracking. Your privacy is completely protected.</p>
                  </div>
                </div>
                
                <div class="note-card care-note">
                  <div class="note-icon">
                    <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                      <path d="M20.84 4.61a5.5 5.5 0 0 0-7.78 0L12 5.67l-1.06-1.06a5.5 5.5 0 0 0-7.78 7.78l8.84 8.84a.5.5 0 0 0 .71 0l8.84-8.84a5.5 5.5 0 0 0 0-7.78z"/>
                    </svg>
                  </div>
                  <div class="note-content">
                    <h4>We're Here to Support, Not Replace</h4>
                    <p>SmileyApp complements your wellbeing but isn't a substitute for professional mental health care. For serious concerns, please reach out to licensed professionals.</p>
                  </div>
                </div>
              </div>
            </div>

            <!-- Get Started -->
            <div class="get-started-section">
              <div class="get-started-card">
                <div class="get-started-content">
                  <h3>Ready when you are</h3>
                  <p>Take your time exploring. There's no pressure to do anything specific - just use what feels helpful to you.</p>
                </div>
                <div class="get-started-icon">
                  <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                    <path d="M9 18l6-6-6-6"/>
                  </svg>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>

      <!-- Navigation -->
      <div class="onboarding-nav">
        <button id="prev-btn" class="nav-btn secondary" style="display: none;">
          <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
            <polyline points="15,18 9,12 15,6"/>
          </svg>
          Back
        </button>
        
        <div class="nav-spacer"></div>
        
        <button id="next-btn" class="nav-btn primary">
          Next
          <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
            <polyline points="9,18 15,12 9,6"/>
          </svg>
        </button>
        
        <button id="finish-btn" class="nav-btn primary" style="display: none;">
          Get Started
          <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
            <polyline points="20,6 9,17 4,12"/>
          </svg>
        </button>
      </div>
    </div>
  </div>
</div>

<style>
/* Clean Material Design 3 Onboarding */
.onboarding-content {
    max-width: 700px;
    width: 90vw;
    max-height: 85vh;
    display: flex;
    flex-direction: column;
    overflow: hidden;
    border-radius: 1.5rem;
    background: rgb(var(--md-surface-container));
    box-shadow: 0 24px 48px rgba(0, 0, 0, 0.16);
    position: relative;
  }

  .onboarding-body {
    flex: 1;
    overflow-y: auto;
    padding-bottom: 6rem; /* Space for fixed navigation */
  }

/* Progress Indicator */
.progress-container {
  padding: 1.5rem 2rem 1rem;
  border-bottom: 1px solid rgba(var(--md-outline-variant), 0.2);
  background: rgba(var(--md-surface), 0.8);
  backdrop-filter: blur(8px);
}

.onboarding-progress-bar {
  width: 100%;
  height: 6px;
  background: rgba(var(--md-outline-variant), 0.3);
  border-radius: 3px;
  overflow: hidden;
  margin-bottom: 0.75rem;
}

.onboarding-progress-fill {
  height: 100%;
  background: linear-gradient(90deg, rgb(var(--md-primary)), rgb(var(--md-secondary)));
  border-radius: 3px;
  width: 25%;
  transition: width 0.4s ease;
}

.onboarding-progress-text {
  font-size: 0.875rem;
  color: rgb(var(--md-on-surface-variant));
  font-weight: 500;
}
/* Redesigned Theme Chips */
.themes-grid.compact { 
  grid-template-columns: repeat(auto-fit, minmax(140px, 1fr)); 
  gap: 1rem;
}

.theme-live-preview {
  width: 100%;
  background: var(--tlp-bg, linear-gradient(135deg,#3b82f6,#1e40af));
  border-radius: 1.25rem;
  padding: 1.25rem;
  margin: 0 0 1.25rem 0;
  position: relative;
  overflow: hidden;
  display: flex;
  flex-direction: column;
  gap: 0.75rem;
  box-shadow: 0 8px 24px rgba(0,0,0,.12);
  isolation: isolate;
}

.theme-live-preview::before { 
  content:""; 
  position:absolute; 
  inset:0; 
  background:linear-gradient(180deg,rgba(255,255,255,0.15),transparent); 
  pointer-events:none; 
}

.tlp-header { 
  height: 44px; 
  background: var(--tlp-primary, rgba(255,255,255,.12)); 
  border-radius: .875rem; 
}

.tlp-body { 
  flex:1; 
  display:flex; 
  flex-direction:column; 
  gap:.6rem; 
}

.tlp-card { 
  background: var(--tlp-surface, rgba(255,255,255,.55)); 
  backdrop-filter: blur(8px); 
  border-radius:.9rem; 
  height:38px; 
}

.tlp-card-sm { 
  width:65%; 
  height:30px; 
  background: var(--tlp-surface-variant, rgba(255,255,255,.38)); 
}

.theme-chip { 
  position: relative;
  display: flex; 
  flex-direction: column; 
  align-items: center; 
  gap: 0.75rem; 
  padding: 1.25rem 1rem; 
  background: rgb(var(--md-surface-container-low));
  border: 2px solid rgba(var(--md-outline-variant), 0.3); 
  border-radius: 1.25rem; 
  cursor: pointer; 
  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1); 
  overflow: hidden;
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.08);
}

.theme-chip:hover { 
  transform: translateY(-3px); 
  box-shadow: 0 12px 32px rgba(0, 0, 0, 0.15);
  border-color: rgba(var(--md-primary), 0.4);
}

.theme-chip:active { 
  transform: translateY(-1px); 
}

.theme-chip.selected { 
  border-color: rgb(var(--md-primary));
  box-shadow: 0 0 0 3px rgba(var(--md-primary), 0.2), 0 8px 24px rgba(0, 0, 0, 0.15);
  transform: translateY(-2px);
}

.theme-chip .chip-bg { 
  width: 48px;
  height: 48px;
  border-radius: 12px;
  position: relative;
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);
  overflow: hidden;
}

.theme-chip .chip-bg::after {
  content: '';
  position: absolute;
  inset: 0;
  background: linear-gradient(135deg, rgba(255,255,255,0.3), transparent);
  border-radius: inherit;
}

.theme-chip .chip-outline { 
  display: none;
}

.theme-chip .chip-name { 
  font-size: 0.875rem; 
  font-weight: 600; 
  letter-spacing: 0.025em;
  color: rgb(var(--md-on-surface)); 
  text-align: center;
  line-height: 1.2;
}

.theme-chip.selected .chip-name {
  color: rgb(var(--md-primary));
}

/* Improved theme gradients */
.theme-chip .smile-theme { 
  background: linear-gradient(135deg, #3b82f6 0%, #1e40af 100%);
}

.theme-chip .forest-theme { 
  background: linear-gradient(135deg, #10b981 0%, #047857 100%);
}

.theme-chip .sunset-theme { 
  background: linear-gradient(135deg, #f97316 0%, #ea580c 100%);
}

.theme-chip .lavender-theme { 
  background: linear-gradient(135deg, #a855f7 0%, #7c3aed 100%);
}

@media (max-width: 640px){
  .themes-grid.compact { grid-template-columns: repeat(2,1fr); }
  .theme-live-preview { padding:1rem; }
}

/* Theme Mode Selection Styles */
.theme-mode-selection {
  margin-bottom: 2rem;
}

.mode-selection-title {
  font-size: 1rem;
  font-weight: 600;
  color: rgb(var(--md-on-surface));
  margin: 0 0 1rem 0;
  text-align: left;
}

.mode-chips {
  display: grid;
  grid-template-columns: repeat(3, 1fr);
  gap: 0.75rem;
}

.mode-chip {
  display: flex;
  flex-direction: column;
  align-items: center;
  gap: 0.5rem;
  padding: 1rem 0.75rem;
  background: rgba(var(--md-surface-container-low), 0.6);
  border: 2px solid rgba(var(--md-outline-variant), 0.3);
  border-radius: 1rem;
  cursor: pointer;
  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
  position: relative;
  overflow: hidden;
}

.mode-chip:hover {
  background: rgba(var(--md-surface-container), 0.8);
  border-color: rgba(var(--md-primary), 0.4);
  transform: translateY(-2px);
  box-shadow: 0 6px 20px rgba(0, 0, 0, 0.1);
}

.mode-chip.selected {
  background: rgba(var(--md-primary-container), 0.2);
  border-color: rgb(var(--md-primary));
  box-shadow: 0 0 0 2px rgba(var(--md-primary), 0.2), 0 4px 16px rgba(0, 0, 0, 0.12);
  transform: translateY(-1px);
}

.mode-icon {
  width: 2.5rem;
  height: 2.5rem;
  background: rgba(var(--md-primary), 0.1);
  border-radius: 0.75rem;
  display: flex;
  align-items: center;
  justify-content: center;
  color: rgb(var(--md-primary));
  transition: all 0.3s ease;
}

.mode-chip.selected .mode-icon {
  background: rgba(var(--md-primary), 0.15);
  color: rgb(var(--md-primary));
  transform: scale(1.05);
}

.mode-name {
  font-size: 0.875rem;
  font-weight: 600;
  color: rgb(var(--md-on-surface));
  line-height: 1.2;
}

.mode-chip.selected .mode-name {
  color: rgb(var(--md-primary));
}

.mode-desc {
  font-size: 0.75rem;
  color: rgb(var(--md-on-surface-variant));
  opacity: 0.8;
  line-height: 1.2;
  text-align: center;
}

.mode-chip.selected .mode-desc {
  color: rgb(var(--md-primary));
  opacity: 0.9;
}

/* Accent Color Selection Styles */
.accent-color-selection {
  margin-top: 1.5rem;
}

.accent-selection-title {
  font-size: 1rem;
  font-weight: 600;
  color: rgb(var(--md-on-surface));
  margin: 0 0 1rem 0;
  text-align: left;
}

@media (max-width: 640px) {
  .mode-chips {
    grid-template-columns: 1fr;
    gap: 0.5rem;
  }
  
  .mode-chip {
    flex-direction: row;
    justify-content: flex-start;
    padding: 0.875rem 1rem;
    gap: 0.75rem;
  }
  
  .mode-icon {
    width: 2rem;
    height: 2rem;
  }
  
  .mode-name {
    font-size: 0.9375rem;
  }
  
  .mode-desc {
    font-size: 0.8125rem;
  }
}

/* Body */
.onboarding-body {
  flex: 1;
  overflow-y: auto;
  padding: 1.5rem;
}

.step-content {
  display: none;
  animation: slideInRight 0.3s ease-out;
}

.step-content.active {
  display: block;
}

@keyframes slideInRight {
  from {
    opacity: 0;
    transform: translateX(20px);
  }
  to {
    opacity: 1;
    transform: translateX(0);
  }
}

/* Step Header */
.step-header {
  text-align: center;
  margin-bottom: 1.25rem;
}

.step-icon {
  width: 4rem;
  height: 4rem;
  border-radius: 1rem;
  background: linear-gradient(135deg, rgb(var(--md-primary)), rgb(var(--md-secondary)));
  color: rgb(var(--md-on-primary));
  display: flex;
  align-items: center;
  justify-content: center;
  margin: 0 auto 1rem;
}

.step-icon.success {
  background: linear-gradient(135deg, rgb(var(--md-success)), rgb(var(--md-primary)));
}

.step-header h2 {
  font-size: 1.75rem;
  font-weight: 600;
  color: rgb(var(--md-on-surface));
  margin: 0 0 0.5rem 0;
}

.step-header p {
  font-size: 1rem;
  color: rgb(var(--md-on-surface-variant));
  margin: 0;
  line-height: 1.5;
}

/* Features Grid */
.features-grid {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
  gap: 1rem;
}

.feature-item {
  display: flex;
  align-items: center;
  gap: 1rem;
  padding: 1.5rem;
  border-radius: 1rem;
  background: rgba(var(--md-surface-container-low), 0.5);
  border: 1px solid rgba(var(--md-outline-variant), 0.2);
  transition: all 0.3s ease;
}

.feature-item:hover {
  transform: translateY(-2px);
  box-shadow: 0 8px 24px rgba(0, 0, 0, 0.1);
  border-color: rgba(var(--md-primary), 0.3);
}

.feature-icon {
  width: 2.5rem;
  height: 2.5rem;
  display: flex;
  align-items: center;
  justify-content: center;
  border-radius: 0.75rem;
  background: rgba(var(--md-primary), 0.1);
  flex-shrink: 0;
  color: rgb(var(--md-primary));
}

.feature-item h4 {
  font-size: 1rem;
  font-weight: 600;
  color: rgb(var(--md-on-surface));
  margin: 0 0 0.25rem 0;
}

.feature-item p {
  font-size: 0.875rem;
  color: rgb(var(--md-on-surface-variant));
  margin: 0;
}

/* Theme Selection */
.themes-grid {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(140px, 1fr));
  gap: 1rem;
}

/* Security Settings Styles */
.security-options {
  display: flex;
  flex-direction: column;
  gap: 1.5rem;
}

.security-card {
  background: rgba(var(--md-surface-container-low), 0.5);
  border: 1px solid rgba(var(--md-outline-variant), 0.2);
  border-radius: 1rem;
  padding: 1.5rem;
  transition: all 0.3s ease;
}

.security-card:hover {
  border-color: rgba(var(--md-primary), 0.3);
  transform: translateY(-2px);
  box-shadow: 0 8px 24px rgba(0, 0, 0, 0.1);
}

.security-header {
  display: flex;
  align-items: center;
  gap: 1rem;
}

.security-icon {
  width: 3rem;
  height: 3rem;
  background: rgba(var(--md-primary), 0.1);
  border-radius: 0.75rem;
  display: flex;
  align-items: center;
  justify-content: center;
  color: rgb(var(--md-primary));
  flex-shrink: 0;
}

.security-details {
  flex: 1;
}

.security-details h4 {
  margin: 0 0 0.25rem 0;
  font-size: 1rem;
  font-weight: 600;
  color: rgb(var(--md-on-surface));
}

.security-details p {
  margin: 0;
  font-size: 0.875rem;
  color: rgb(var(--md-on-surface-variant));
}

.security-toggle {
  flex-shrink: 0;
}

.toggle-input {
  display: none;
}

.toggle-label {
  cursor: pointer;
  display: block;
}

.toggle-track {
  width: 3rem;
  height: 1.75rem;
  background: rgba(var(--md-outline), 0.3);
  border-radius: 1rem;
  position: relative;
  transition: all 0.3s ease;
  display: flex;
  align-items: center;
}

.toggle-thumb {
  width: 1.25rem;
  height: 1.25rem;
  background: rgb(var(--md-outline));
  border-radius: 50%;
  position: absolute;
  left: 0.25rem;
  transition: all 0.3s ease;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
}

.toggle-input:checked + .toggle-label .toggle-track {
  background: rgb(var(--md-primary));
}

.toggle-input:checked + .toggle-label .toggle-thumb {
  left: 1.5rem;
  background: rgb(var(--md-on-primary));
}

.security-info {
  display: flex;
  flex-direction: column;
  gap: 0.75rem;
  padding: 1.25rem;
  background: rgba(var(--md-primary-container), 0.1);
  border: 1px solid rgba(var(--md-primary), 0.2);
  border-radius: 1rem;
}

.info-item {
  display: flex;
  align-items: center;
  gap: 0.75rem;
  font-size: 0.875rem;
  color: rgb(var(--md-on-surface-variant));
}

.info-icon {
  font-size: 1.25rem;
  width: 1.5rem;
  text-align: center;
  flex-shrink: 0;
}

/* Profile Form Styles */
.profile-form {
  display: flex;
  flex-direction: column;
  gap: 1.5rem;
}

.form-group {
  display: flex;
  flex-direction: column;
  gap: 0.75rem;
}

.form-label {
  font-size: 1rem;
  font-weight: 500;
  color: rgb(var(--md-on-surface));
}

.form-input {
  padding: 0.875rem 1rem;
  border: 1px solid rgba(var(--md-outline-variant), 0.3);
  border-radius: 0.75rem;
  background: rgba(var(--md-surface-container-highest), 0.8);
  color: rgb(var(--md-on-surface));
  font-size: 1rem;
  transition: all 0.3s ease;
}

.form-input:focus {
  outline: none;
  border-color: rgb(var(--md-primary));
  box-shadow: 0 0 0 2px rgba(var(--md-primary), 0.2);
}

.form-input::placeholder {
  color: rgb(var(--md-on-surface-variant));
}

.goals-grid {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
  gap: 0.75rem;
}

.goal-option {
  display: flex;
  align-items: center;
  gap: 0.75rem;
  padding: 1rem;
  background: rgba(var(--md-surface-container-low), 0.5);
  border: 1px solid rgba(var(--md-outline-variant), 0.2);
  border-radius: 0.75rem;
  cursor: pointer;
  transition: all 0.3s ease;
}

.goal-option:hover {
  border-color: rgba(var(--md-primary), 0.3);
  background: rgba(var(--md-surface-container), 0.7);
}

.goal-option input[type="checkbox"] {
  width: 1.125rem;
  height: 1.125rem;
  accent-color: rgb(var(--md-primary));
  margin: 0;
}

.goal-option input[type="checkbox"]:checked + .goal-text {
  color: rgb(var(--md-primary));
  font-weight: 500;
}

.goal-text {
  font-size: 0.875rem;
  color: rgb(var(--md-on-surface));
  transition: all 0.3s ease;
}

.profile-note {
  background: rgba(var(--md-primary-container), 0.1);
  border: 1px solid rgba(var(--md-primary), 0.2);
  border-radius: 1rem;
  overflow: hidden;
}

.theme-showcase {
  margin-bottom: 2rem;
  display: flex;
  justify-content: center;
}

.theme-preview-large {
  position: relative;
}

.preview-phone {
  width: 160px;
  height: 280px;
  background: linear-gradient(145deg, #f0f0f0, #ffffff);
  border-radius: 1.5rem;
  padding: 0.75rem;
  box-shadow: 0 20px 40px rgba(0, 0, 0, 0.1);
  position: relative;
  overflow: hidden;
}

.preview-phone::before {
  content: '';
  position: absolute;
  top: 0.5rem;
  left: 50%;
  transform: translateX(-50%);
  width: 60px;
  height: 4px;
  background: #ddd;
  border-radius: 2px;
}

.preview-screen {
  width: 100%;
  height: 100%;
  border-radius: 1.5rem;
  overflow: hidden;
  transition: all 0.5s ease;
  background: var(--preview-bg, linear-gradient(135deg, #3b82f6, #1e40af));
}

.preview-header {
  height: 60px;
  background: var(--preview-primary, rgba(30, 64, 175, 0.9));
  position: relative;
}

.preview-content {
  padding: 1rem;
  display: flex;
  flex-direction: column;
  gap: 0.75rem;
  height: calc(100% - 60px);
}

.preview-card {
  height: 40px;
  background: var(--preview-surface, rgba(255, 255, 255, 0.9));
  border-radius: 0.75rem;
  backdrop-filter: blur(8px);
}

.preview-card.small {
  height: 30px;
  width: 70%;
  background: var(--preview-surface-variant, rgba(255, 255, 255, 0.7));
}

.theme-option {
  text-align: center;
  transition: all 0.3s ease;
  cursor: pointer;
}

.theme-option:hover {
  transform: translateY(-4px);
}

.theme-preview {
  width: 100%;
  height: 100px;
  border-radius: 1rem;
  margin-bottom: 0.75rem;
  position: relative;
  overflow: hidden;
  border: 3px solid transparent;
  transition: all 0.3s ease;
  display: flex;
  flex-direction: column;
}

.theme-option:hover .theme-preview {
  border-color: rgba(var(--md-primary), 0.5);
  box-shadow: 0 8px 24px rgba(0, 0, 0, 0.15);
}

.theme-option.selected .theme-preview {
  border-color: rgb(var(--md-primary));
  box-shadow: 0 0 0 2px rgba(var(--md-primary), 0.2);
}

.preview-bar {
  height: 30%;
  width: 100%;
}

.preview-content {
  flex: 1;
  display: flex;
  align-items: center;
  justify-content: center;
  gap: 0.5rem;
  padding: 1rem;
}

.preview-dot {
  width: 12px;
  height: 12px;
  border-radius: 50%;
}

/* Theme Colors */
.smile-theme {
  background: linear-gradient(135deg, #3b82f6 0%, #1e40af 100%);
}
.smile-theme .preview-bar { background: #1e40af; }
.smile-theme .preview-dot.primary { background: #1e3a8a; }
.smile-theme .preview-dot.secondary { background: #3b82f6; }
.smile-theme .preview-dot.accent { background: #60a5fa; }

.forest-theme {
  background: linear-gradient(135deg, #10b981 0%, #047857 100%);
}
.forest-theme .preview-bar { background: #047857; }
.forest-theme .preview-dot.primary { background: #065f46; }
.forest-theme .preview-dot.secondary { background: #10b981; }
.forest-theme .preview-dot.accent { background: #34d399; }

.sunset-theme {
  background: linear-gradient(135deg, #f97316 0%, #ea580c 100%);
}
.sunset-theme .preview-bar { background: #ea580c; }
.sunset-theme .preview-dot.primary { background: #c2410c; }
.sunset-theme .preview-dot.secondary { background: #f97316; }
.sunset-theme .preview-dot.accent { background: #fb923c; }

.lavender-theme {
  background: linear-gradient(135deg, #a855f7 0%, #7c3aed 100%);
}
.lavender-theme .preview-bar { background: #7c3aed; }
.lavender-theme .preview-dot.primary { background: #6d28d9; }
.lavender-theme .preview-dot.secondary { background: #a855f7; }
.lavender-theme .preview-dot.accent { background: #c084fc; }

.theme-name {
  font-size: 0.9rem;
  font-weight: 500;
  color: rgb(var(--md-on-surface));
}

/* AI Setup */
.setup-container,
.ai-setup-container {
  display: flex;
  flex-direction: column;
  gap: 1.5rem;
}

/* Compact Ollama Helper in onboarding */
.ai-setup-container .ollama-helper {
  max-height: 600px;
  overflow-y: auto;
  border-radius: 1rem;
  border: 1px solid rgba(var(--md-outline-variant), 0.2);
  background: rgba(var(--md-surface-container-low), 0.3);
}

.ai-setup-container .ollama-helper .setup-tabs {
  gap: 0.5rem;
}

.ai-setup-container .ollama-helper .tab-button {
  padding: 0.5rem 1rem;
  font-size: 0.875rem;
}

.system-detection {
  margin-bottom: 1rem;
}

.detection-card {
  padding: 1.5rem;
  background: linear-gradient(135deg, rgba(var(--md-primary), 0.1), rgba(var(--md-secondary), 0.05));
  border: 1px solid rgba(var(--md-primary), 0.2);
  border-radius: 1rem;
  position: relative;
  overflow: hidden;
}

.detection-card::before {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  height: 3px;
  background: linear-gradient(90deg, rgb(var(--md-primary)), rgb(var(--md-secondary)));
}

.detection-header {
  display: flex;
  align-items: center;
  gap: 0.75rem;
  margin-bottom: 1rem;
  color: rgb(var(--md-primary));
}

.detection-header h4 {
  margin: 0;
  font-weight: 600;
}

.system-info {
  display: flex;
  gap: 0.5rem;
  align-items: center;
}

.system-badge {
  background: rgba(var(--md-primary), 0.1);
  color: rgb(var(--md-primary));
  padding: 0.25rem 0.75rem;
  border-radius: 1rem;
  font-size: 0.875rem;
  font-weight: 500;
  border: 1px solid rgba(var(--md-primary), 0.2);
}

.setup-instructions {
  display: flex;
  flex-direction: column;
  gap: 1rem;
}

.instruction-card {
  background: rgba(var(--md-surface-container-low), 0.5);
  border: 1px solid rgba(var(--md-outline-variant), 0.2);
  border-radius: 1rem;
  padding: 1.5rem;
  position: relative;
  transition: all 0.3s ease;
}

.instruction-card:hover {
  border-color: rgba(var(--md-primary), 0.3);
  transform: translateY(-2px);
  box-shadow: 0 8px 24px rgba(0, 0, 0, 0.1);
}

.instruction-header {
  display: flex;
  align-items: center;
  gap: 1rem;
  margin-bottom: 1rem;
}

.step-number {
  width: 2rem;
  height: 2rem;
  background: linear-gradient(135deg, rgb(var(--md-primary)), rgb(var(--md-secondary)));
  color: rgb(var(--md-on-primary));
  border-radius: 50%;
  display: flex;
  align-items: center;
  justify-content: center;
  font-weight: 600;
  font-size: 0.875rem;
}

.instruction-header h4 {
  margin: 0;
  color: rgb(var(--md-on-surface));
  font-weight: 600;
}

.command-section {
  display: flex;
  flex-direction: column;
  gap: 1rem;
}

.command-group {
  display: flex;
  flex-direction: column;
  gap: 0.5rem;
}

.command-group label {
  font-size: 0.875rem;
  font-weight: 500;
  color: rgb(var(--md-on-surface-variant));
}

.command-box {
  display: flex;
  align-items: center;
  gap: 0.75rem;
  background: rgba(var(--md-surface-container-highest), 0.8);
  border: 1px solid rgba(var(--md-outline-variant), 0.3);
  border-radius: 0.75rem;
  padding: 0.75rem 1rem;
  position: relative;
  transition: all 0.3s ease;
}

.command-box:hover {
  border-color: rgba(var(--md-primary), 0.5);
  box-shadow: 0 4px 12px rgba(var(--md-primary), 0.1);
}

.command-box code {
  flex: 1;
  background: transparent;
  border: none;
  font-family: 'SF Mono', 'Monaco', 'Inconsolata', 'Roboto Mono', monospace;
  font-size: 0.875rem;
  color: rgb(var(--md-primary));
  font-weight: 500;
}

.copy-btn {
  background: rgba(var(--md-primary), 0.1);
  border: 1px solid rgba(var(--md-primary), 0.2);
  border-radius: 0.5rem;
  padding: 0.5rem;
  color: rgb(var(--md-primary));
  cursor: pointer;
  transition: all 0.3s ease;
  display: flex;
  align-items: center;
  justify-content: center;
}

.copy-btn:hover {
  background: rgba(var(--md-primary), 0.2);
  transform: translateY(-1px);
}

.command-note {
  font-size: 0.75rem;
  color: rgb(var(--md-on-surface-variant));
  margin: 0.5rem 0 0 0;
  font-style: italic;
}

.status-card {
  background: linear-gradient(135deg, rgba(var(--md-tertiary), 0.1), rgba(var(--md-primary), 0.05));
  border: 1px solid rgba(var(--md-tertiary), 0.2);
  border-radius: 1rem;
  padding: 1.5rem;
  text-align: center;
}

.status-header {
  display: flex;
  align-items: center;
  justify-content: center;
  gap: 0.75rem;
  margin-bottom: 1.5rem;
  color: rgb(var(--md-tertiary));
}

.status-header h4 {
  margin: 0;
  font-weight: 600;
}

.ai-status {
  display: flex;
  flex-direction: column;
  gap: 1rem;
}

.setup-info {
  padding: 1.5rem;
  background: rgba(var(--md-surface-container-low), 0.5);
  border-radius: 1rem;
  border: 1px solid rgba(var(--md-outline-variant), 0.2);
}

.setup-info h4 {
  font-size: 1.125rem;
  font-weight: 600;
  color: rgb(var(--md-on-surface));
  margin: 0 0 1rem 0;
}

.setup-steps {
  margin: 0;
  padding-left: 1.5rem;
}

.setup-steps li {
  margin-bottom: 0;
  color: rgb(var(--md-on-surface-variant));
  line-height: 1.5;
}

.setup-steps code {
  background: rgba(var(--md-surface-container-highest), 0.8);
  padding: 0.25rem 0.5rem;
  border-radius: 0.25rem;
  font-family: 'Monaco', monospace;
  font-size: 0.875rem;
  color: rgb(var(--md-primary));
}

.setup-steps a {
  color: rgb(var(--md-primary));
  text-decoration: none;
  font-weight: 500;
}

.setup-steps a:hover {
  text-decoration: underline;
}

.status-check-btn {
  display: flex;
  align-items: center;
  gap: 0.5rem;
  padding: 0.75rem 1.25rem;
  background: rgb(var(--md-primary));
  color: rgb(var(--md-on-primary));
  border: none;
  border-radius: 0.75rem;
  font-weight: 500;
  cursor: pointer;
  transition: all 0.3s ease;
}

.status-check-btn:hover {
  background: rgb(var(--md-primary-container));
  color: rgb(var(--md-on-primary-container));
  transform: translateY(-1px);
}

.status-controls { display: flex; align-items: center; gap: 0.75rem; flex-wrap: wrap; }

.status-result {
  display: inline-flex;
  align-items: center;
  min-height: 0;
  padding: 0.5rem 0.75rem;
  border-radius: 0.5rem;
  background: rgba(var(--md-surface-container-highest), 0.5);
  border: 1px solid rgba(var(--md-outline-variant), 0.2);
  color: rgb(var(--md-on-surface));
}

.status-result:empty::after {
  content: "Click 'Check Status' to verify your setup";
}

.setup-note {
  background: rgba(var(--md-warning-container), 0.1);
  border: 1px solid rgba(var(--md-warning), 0.2);
  border-radius: 1rem;
  overflow: hidden;
}

.note-content {
  padding: 1.5rem;
  display: flex;
  align-items: flex-start;
  gap: 1rem;
}

.note-content svg {
  color: rgb(var(--md-warning));
  flex-shrink: 0;
  margin-top: 0.125rem;
}

.setup-note p {
  margin: 0;
  font-size: 0.875rem;
  color: rgb(var(--md-on-surface-variant));
  line-height: 1.5;
}

/* Completion Page - Enhanced Material Design */
.completion-icon-container {
  display: flex;
  align-items: center;
  justify-content: center;
  width: 64px;
  height: 64px;
  margin: 0 auto 1rem;
}

.completion-icon-bg {
  display: flex;
  align-items: center;
  justify-content: center;
  width: 64px;
  height: 64px;
  background: linear-gradient(135deg, rgb(var(--md-primary)), rgb(var(--md-secondary)));
  border-radius: 32px;
  box-shadow: 0 4px 20px rgba(var(--md-primary), 0.3);
  position: relative;
  overflow: hidden;
}

.completion-icon-bg::before {
  content: '';
  position: absolute;
  inset: 0;
  background: linear-gradient(135deg, rgba(255, 255, 255, 0.1), transparent);
  border-radius: inherit;
}

.completion-icon {
  color: white;
  z-index: 1;
}

.completion-header {
  text-align: center;
}

.completion-header h2 {
  font-size: 1.75rem;
  font-weight: 700;
  color: rgb(var(--md-on-surface));
  margin: 0 0 0.5rem 0;
  letter-spacing: -0.025em;
}

.completion-subtitle {
  font-size: 1rem;
  color: rgb(var(--md-on-surface-variant));
  margin: 0;
  font-weight: 400;
  line-height: 1.4;
}

/* New Completion Page Design */
.completion-content {
  display: flex;
  flex-direction: column;
  gap: 2rem;
}

/* Welcome Section */
.welcome-section {
  margin-bottom: 0.5rem;
}

.welcome-card {
  background: linear-gradient(135deg, 
    rgba(var(--md-primary), 0.04) 0%, 
    rgba(var(--md-secondary), 0.02) 100%
  );
  border: 1px solid rgba(var(--md-outline-variant), 0.2);
  border-radius: 1.25rem;
  padding: 1.75rem;
  position: relative;
  overflow: hidden;
}

.welcome-card::before {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  height: 2px;
  background: linear-gradient(90deg, 
    rgba(var(--md-primary), 0.6) 0%, 
    rgba(var(--md-secondary), 0.4) 100%
  );
}

.welcome-card h3 {
  font-size: 1.25rem;
  font-weight: 600;
  color: rgb(var(--md-on-surface));
  margin: 0 0 1rem 0;
  letter-spacing: -0.02em;
}

.welcome-card p {
  font-size: 0.9375rem;
  line-height: 1.6;
  color: rgb(var(--md-on-surface-variant));
  margin: 0;
}

/* Section Titles */
.section-title {
  font-size: 1rem;
  font-weight: 600;
  color: rgb(var(--md-on-surface));
  margin: 0 0 1rem 0;
  letter-spacing: 0.025em;
  text-transform: none;
}

/* Features Section */
.features-section {
  margin-bottom: 0.5rem;
}

.feature-cards {
  display: grid;
  grid-template-columns: 1fr;
  gap: 0.875rem;
}

.feature-card {
  display: flex;
  align-items: center;
  gap: 1rem;
  padding: 1.125rem 1.25rem;
  background: rgba(var(--md-surface-container-low), 0.6);
  border: 1px solid rgba(var(--md-outline-variant), 0.25);
  border-radius: 1rem;
  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
}

.feature-card:hover {
  background: rgba(var(--md-surface-container), 0.8);
  border-color: rgba(var(--md-primary), 0.3);
  transform: translateY(-2px);
  box-shadow: 0 6px 20px rgba(var(--md-shadow), 0.12);
}

.feature-icon {
  display: flex;
  align-items: center;
  justify-content: center;
  width: 48px;
  height: 48px;
  background: linear-gradient(135deg, 
    rgba(var(--md-primary), 0.1) 0%, 
    rgba(var(--md-secondary), 0.05) 100%
  );
  border: 1px solid rgba(var(--md-primary), 0.2);
  border-radius: 14px;
  flex-shrink: 0;
  transition: all 0.3s ease;
}

.feature-card:hover .feature-icon {
  background: linear-gradient(135deg, 
    rgba(var(--md-primary), 0.15) 0%, 
    rgba(var(--md-secondary), 0.08) 100%
  );
  border-color: rgba(var(--md-primary), 0.3);
  transform: scale(1.05);
}

.feature-icon svg {
  color: rgb(var(--md-primary));
}

.feature-content {
  display: flex;
  flex-direction: column;
  gap: 0.25rem;
  min-width: 0;
}

.feature-title {
  font-size: 1rem;
  font-weight: 600;
  color: rgb(var(--md-on-surface));
  line-height: 1.2;
}

.feature-desc {
  font-size: 0.875rem;
  color: rgb(var(--md-on-surface-variant));
  line-height: 1.4;
  font-weight: 400;
}

/* Notes Section */
.notes-section {
  margin-bottom: 0.5rem;
}

.note-cards {
  display: flex;
  flex-direction: column;
  gap: 1rem;
}

.note-card {
  display: flex;
  align-items: flex-start;
  gap: 1rem;
  padding: 1.25rem;
  border-radius: 1rem;
  transition: all 0.3s ease;
  position: relative;
  overflow: hidden;
}

.privacy-note {
  background: linear-gradient(135deg, 
    rgba(var(--md-tertiary), 0.06) 0%, 
    rgba(var(--md-primary), 0.03) 100%
  );
  border: 1px solid rgba(var(--md-tertiary), 0.2);
}

.care-note {
  background: linear-gradient(135deg, 
    rgba(var(--md-secondary), 0.06) 0%, 
    rgba(var(--md-primary), 0.03) 100%
  );
  border: 1px solid rgba(var(--md-secondary), 0.2);
}

.note-card:hover {
  transform: translateY(-1px);
  box-shadow: 0 4px 16px rgba(var(--md-shadow), 0.1);
}

.privacy-note:hover {
  border-color: rgba(var(--md-tertiary), 0.3);
}

.care-note:hover {
  border-color: rgba(var(--md-secondary), 0.3);
}

.note-icon {
  display: flex;
  align-items: center;
  justify-content: center;
  width: 40px;
  height: 40px;
  border-radius: 10px;
  flex-shrink: 0;
  margin-top: 0.125rem;
}

.privacy-note .note-icon {
  background: rgba(var(--md-tertiary), 0.1);
  color: rgb(var(--md-tertiary));
}

.care-note .note-icon {
  background: rgba(var(--md-secondary), 0.1);
  color: rgb(var(--md-secondary));
}

.note-content h4 {
  font-size: 0.9375rem;
  font-weight: 600;
  color: rgb(var(--md-on-surface));
  margin: 0 0 0.5rem 0;
  line-height: 1.3;
}

.note-content p {
  font-size: 0.8125rem;
  line-height: 1.5;
  color: rgb(var(--md-on-surface-variant));
  margin: 0;
}

/* Get Started Section */
.get-started-section {
  margin-top: 0.5rem;
}

.get-started-card {
  display: flex;
  align-items: center;
  gap: 1.25rem;
  padding: 1.5rem;
  background: linear-gradient(135deg, 
    rgba(var(--md-primary), 0.08) 0%, 
    rgba(var(--md-secondary), 0.04) 100%
  );
  border: 1px solid rgba(var(--md-primary), 0.2);
  border-radius: 1.25rem;
  transition: all 0.3s ease;
  cursor: pointer;
}

.get-started-card:hover {
  background: linear-gradient(135deg, 
    rgba(var(--md-primary), 0.12) 0%, 
    rgba(var(--md-secondary), 0.06) 100%
  );
  border-color: rgba(var(--md-primary), 0.3);
  transform: translateY(-2px);
  box-shadow: 0 8px 24px rgba(var(--md-primary), 0.15);
}

.get-started-content {
  flex: 1;
}

.get-started-content h3 {
  font-size: 1.125rem;
  font-weight: 600;
  color: rgb(var(--md-on-surface));
  margin: 0 0 0.5rem 0;
  letter-spacing: -0.01em;
}

.get-started-content p {
  font-size: 0.875rem;
  line-height: 1.5;
  color: rgb(var(--md-on-surface-variant));
  margin: 0;
}

.get-started-icon {
  display: flex;
  align-items: center;
  justify-content: center;
  width: 44px;
  height: 44px;
  background: rgba(var(--md-primary), 0.1);
  border: 1px solid rgba(var(--md-primary), 0.2);
  border-radius: 12px;
  color: rgb(var(--md-primary));
  flex-shrink: 0;
  transition: all 0.3s ease;
}

.get-started-card:hover .get-started-icon {
  background: rgba(var(--md-primary), 0.15);
  border-color: rgba(var(--md-primary), 0.3);
  transform: scale(1.1);
}

/* Mobile responsiveness for new completion design */
@media (max-width: 640px) {
  .welcome-card {
    padding: 1.5rem;
  }
  
  .feature-icon {
    width: 44px;
    height: 44px;
  }
  
  .note-cards {
    gap: 0.875rem;
  }
  
  .note-card {
    padding: 1rem;
  }
  
  .get-started-card {
    padding: 1.25rem;
    gap: 1rem;
  }
  
  .get-started-icon {
    width: 40px;
    height: 40px;
  }
}

.privacy-reminder {
  padding: 1.5rem;
  background: rgba(var(--md-primary-container), 0.1);
  border: 1px solid rgba(var(--md-primary), 0.2);
  border-radius: 1rem;
  text-align: center;
}

.privacy-reminder p {
  margin: 0;
  font-size: 0.875rem;
  color: rgb(var(--md-on-surface-variant));
  line-height: 1.5;
}

/* Form textarea styles */
.form-textarea {
  padding: 0.875rem 1rem;
  border: 1px solid rgba(var(--md-outline-variant), 0.3);
  border-radius: 0.75rem;
  background: rgba(var(--md-surface-container-highest), 0.8);
  color: rgb(var(--md-on-surface));
  font-size: 1rem;
  font-family: inherit;
  resize: vertical;
  min-height: 100px;
  transition: all 0.3s ease;
}

.form-textarea:focus {
  outline: none;
  border-color: rgb(var(--md-primary));
  box-shadow: 0 0 0 2px rgba(var(--md-primary), 0.2);
}

.form-textarea::placeholder {
  color: rgb(var(--md-on-surface-variant));
}

.char-counter {
  display: flex;
  justify-content: flex-end;
  margin-top: 0.5rem;
  font-size: 0.75rem;
  color: rgb(var(--md-on-surface-variant));
}

.char-count {
  color: rgb(var(--md-primary));
  font-weight: 500;
}

/* Security info icon styling */
.info-icon {
  width: 1.5rem;
  height: 1.5rem;
  display: flex;
  align-items: center;
  justify-content: center;
  flex-shrink: 0;
  color: rgb(var(--md-primary));
}

/* Navigation */
.onboarding-nav {
  display: flex;
  align-items: center;
  gap: 1rem;
  padding: 1.5rem 2rem;
  border-top: 1px solid rgba(var(--md-outline-variant), 0.2);
  background: rgba(var(--md-surface), 0.95);
  backdrop-filter: blur(16px);
  position: absolute;
  bottom: 0;
  left: 0;
  right: 0;
  z-index: 10;
  border-bottom-left-radius: 1.5rem;
  border-bottom-right-radius: 1.5rem;
}

.nav-spacer {
  flex: 1;
}

.nav-btn {
  display: flex;
  align-items: center;
  gap: 0.5rem;
  padding: 0.75rem 1.5rem;
  border-radius: 0.75rem;
  font-weight: 500;
  transition: all 0.3s ease;
  border: none;
  min-width: 120px;
  justify-content: center;
  cursor: pointer;
}

.nav-btn.primary {
  background: rgb(var(--md-primary));
  color: rgb(var(--md-on-primary));
}

.nav-btn.primary:hover {
  background: rgb(var(--md-primary-container));
  color: rgb(var(--md-on-primary-container));
  transform: translateY(-1px);
  box-shadow: 0 4px 12px rgba(var(--md-primary), 0.3);
}

.nav-btn.secondary {
  background: transparent;
  color: rgb(var(--md-on-surface-variant));
  border: 1px solid rgba(var(--md-outline), 0.3);
}

.nav-btn.secondary:hover {
  background: rgba(var(--md-surface-container), 0.5);
  border-color: rgba(var(--md-outline), 0.5);
}

/* Responsive */
@media (max-width: 768px) {
  .onboarding-content {
    width: 95vw;
    max-height: 90vh;
  }
  
  .onboarding-body {
    padding: 1.5rem;
  }
  
  .progress-container {
    padding: 1rem 1.5rem 0.75rem;
  }
  
  .features-grid {
    grid-template-columns: 1fr;
  }
  
  .themes-grid {
    grid-template-columns: repeat(2, 1fr);
  }
  
  .goals-grid {
    grid-template-columns: 1fr;
  }

  /* Completion page mobile styles */
  .completion-icon-container {
    width: 56px;
    height: 56px;
    margin: 0 auto 0.75rem;
  }
  
  .completion-icon-bg {
    width: 56px;
    height: 56px;
    border-radius: 28px;
  }
  
  .completion-icon {
    width: 24px;
    height: 24px;
  }
  
  .completion-header h2 {
    font-size: 1.5rem;
  }
  
  .completion-subtitle {
    font-size: 0.9375rem;
  }
  
  .completion-content {
    gap: 1.25rem;
  }
  
  .completion-message {
    padding: 1.25rem;
  }
  
  .message-content h3 {
    font-size: 1.125rem;
  }
  
  .feature-card {
    padding: 0.875rem 1rem;
    gap: 0.875rem;
  }
  
  .feature-icon {
    width: 40px;
    height: 40px;
  }
  
  .feature-icon svg {
    width: 20px;
    height: 20px;
  }
  
  .privacy-assurance {
    padding: 0.875rem 1rem;
    gap: 0.625rem;
  }
  
  .privacy-icon {
    width: 32px;
    height: 32px;
  }
  
  .privacy-icon svg {
    width: 16px;
    height: 16px;
  }
  
  .security-header {
    flex-direction: column;
    text-align: center;
    gap: 1rem;
  }
  
  .security-toggle {
    align-self: center;
  }
  
  .preview-phone {
    width: 120px;
    height: 200px;
    padding: 0.5rem;
  }
  
  .theme-showcase {
    margin-bottom: 1.5rem;
  }
  
  .onboarding-nav {
    padding: 1rem 1.5rem;
    position: absolute;
    bottom: 0;
    left: 0;
    right: 0;
  }
  
  .onboarding-body {
    padding-bottom: 5rem;
  }
  
  .step-header h2 {
    font-size: 1.5rem;
  }
  
  .step-icon {
    width: 3rem;
    height: 3rem;
  }
}

@media (max-width: 480px) {
  .themes-grid {
    grid-template-columns: 1fr;
  }
  
  .goals-grid {
    grid-template-columns: 1fr;
  }
  
  .security-info {
    gap: 0.5rem;
    padding: 1rem;
  }
  
  .info-item {
    font-size: 0.8rem;
  }
  
  .security-card {
    padding: 1rem;
  }
  
  .preview-phone {
    width: 100px;
    height: 160px;
    padding: 0.375rem;
  }
  
  .theme-showcase {
    margin-bottom: 1rem;
  }
  
  .nav-btn {
    min-width: 100px;
    padding: 0.75rem 1rem;
  }
  
  .feature-item {
    padding: 1rem;
  }
  
  .security-header {
    gap: 0.75rem;
  }
  
  .security-icon {
    width: 2.5rem;
    height: 2.5rem;
  }
  
  .welcome-card {
    padding: 1.5rem;
  }
  
  .welcome-card h3 {
    font-size: 1.25rem;
  }
  
  .acknowledgments {
    padding: 1rem;
  }
  
  .ack-items {
    gap: 0.5rem;
  }
  
  .ack-item {
    padding: 0.75rem;
    font-size: 0.8rem;
  }
}

/* Dark theme adjustments */
[data-theme="dark"] .onboarding-content,
[data-theme$="-dark"] .onboarding-content {
  background: rgb(var(--md-surface-container));
  box-shadow: 0 24px 48px rgba(0, 0, 0, 0.4);
}

[data-theme="dark"] .progress-container,
[data-theme$="-dark"] .progress-container {
  background: rgba(var(--md-surface-container), 0.8);
}

[data-theme="dark"] .onboarding-nav,
[data-theme$="-dark"] .onboarding-nav {
  background: rgba(var(--md-surface-container), 0.95);
  backdrop-filter: blur(16px);
  border-top-color: rgba(var(--md-outline-variant), 0.3);
}

[data-theme="dark"] .form-input,
[data-theme$="-dark"] .form-input {
  background: rgba(var(--md-surface-container-highest), 0.9);
  border-color: rgba(var(--md-outline-variant), 0.4);
  color: rgb(var(--md-on-surface));
}

[data-theme="dark"] .form-input:focus,
[data-theme$="-dark"] .form-input:focus {
  border-color: rgb(var(--md-primary));
  box-shadow: 0 0 0 2px rgba(var(--md-primary), 0.3);
}

[data-theme="dark"] .security-card,
[data-theme$="-dark"] .security-card,
[data-theme="dark"] .goal-option,
[data-theme$="-dark"] .goal-option {
  background: rgba(var(--md-surface-container-low), 0.7);
  border-color: rgba(var(--md-outline-variant), 0.3);
}

[data-theme="dark"] .security-card:hover,
[data-theme$="-dark"] .security-card:hover,
[data-theme="dark"] .goal-option:hover,
[data-theme$="-dark"] .goal-option:hover {
  background: rgba(var(--md-surface-container), 0.8);
  border-color: rgba(var(--md-primary), 0.4);
}

[data-theme="dark"] .toggle-track,
[data-theme$="-dark"] .toggle-track {
  background: rgba(var(--md-outline), 0.4);
}

[data-theme="dark"] .toggle-thumb,
[data-theme$="-dark"] .toggle-thumb {
  background: rgb(var(--md-surface-bright));
}

[data-theme="dark"] .toggle-input:checked + .toggle-label .toggle-thumb,
[data-theme$="-dark"] .toggle-input:checked + .toggle-label .toggle-thumb {
  background: rgb(var(--md-on-primary));
}

[data-theme="dark"] .form-textarea,
[data-theme$="-dark"] .form-textarea {
  background: rgba(var(--md-surface-container-highest), 0.9);
  border-color: rgba(var(--md-outline-variant), 0.4);
  color: rgb(var(--md-on-surface));
}

[data-theme="dark"] .form-textarea:focus,
[data-theme$="-dark"] .form-textarea:focus {
  border-color: rgb(var(--md-primary));
  box-shadow: 0 0 0 2px rgba(var(--md-primary), 0.3);
}

[data-theme="dark"] .welcome-card,
[data-theme$="-dark"] .welcome-card,
[data-theme="dark"] .acknowledgments,
[data-theme$="-dark"] .acknowledgments {
  background: rgba(var(--md-surface-container-low), 0.7);
  border-color: rgba(var(--md-outline-variant), 0.3);
}

[data-theme="dark"] .ack-item,
[data-theme$="-dark"] .ack-item {
  background: rgba(var(--md-surface-container), 0.5);
  border-color: rgba(var(--md-outline-variant), 0.2);
}

/* Dark theme disclaimer styles */
[data-theme="dark"] .disclaimer-item,
[data-theme$="-dark"] .disclaimer-item {
  background: rgba(var(--md-surface-container), 0.6);
  border-color: rgba(var(--md-outline-variant), 0.2);
}

[data-theme="dark"] .disclaimer-item:hover,
[data-theme$="-dark"] .disclaimer-item:hover {
  background: rgba(var(--md-surface-container-high), 0.8);
  border-color: rgba(var(--md-outline), 0.3);
}

/* Dark theme support for new completion design */
[data-theme="dark"] .welcome-card,
[data-theme$="-dark"] .welcome-card {
  background: rgba(var(--md-surface-container), 0.8);
  border-color: rgba(var(--md-outline-variant), 0.2);
}

[data-theme="dark"] .feature-card,
[data-theme$="-dark"] .feature-card {
  background: rgba(var(--md-surface-container), 0.7);
  border-color: rgba(var(--md-outline-variant), 0.2);
}

[data-theme="dark"] .feature-card:hover,
[data-theme$="-dark"] .feature-card:hover {
  background: rgba(var(--md-surface-container-high), 0.9);
  border-color: rgba(var(--md-primary), 0.3);
}

[data-theme="dark"] .note-card,
[data-theme$="-dark"] .note-card {
  background: rgba(var(--md-surface-container), 0.7);
  border-color: rgba(var(--md-outline-variant), 0.2);
}

[data-theme="dark"] .privacy-note,
[data-theme$="-dark"] .privacy-note {
  background: rgba(var(--md-surface-container), 0.8);
  border-color: rgba(var(--md-tertiary), 0.15);
}

[data-theme="dark"] .care-note,
[data-theme$="-dark"] .care-note {
  background: rgba(var(--md-surface-container), 0.8);
  border-color: rgba(var(--md-secondary), 0.15);
}

[data-theme="dark"] .get-started-card,
[data-theme$="-dark"] .get-started-card {
  background: rgba(var(--md-surface-container), 0.8);
  border-color: rgba(var(--md-primary), 0.15);
}

[data-theme="dark"] .get-started-card:hover,
[data-theme$="-dark"] .get-started-card:hover {
  background: rgba(var(--md-surface-container-high), 0.9);
  border-color: rgba(var(--md-primary), 0.25);
}

/* AI Engine Setup - Redesigned Styles */
.ai-setup-redesigned {
  display: flex;
  flex-direction: column;
  gap: 2.5rem;
  padding: 1rem 0;
}

/* Material Design 3 AI Status Row */

.ai-status-row {
  display: flex;
  align-items: center;
  gap: 1rem;
  justify-content: flex-start;
  padding: 1.125rem 1.25rem;
  background: linear-gradient(135deg, 
    rgba(var(--md-primary), 0.04) 0%, 
    rgba(var(--md-secondary), 0.02) 100%
  );
  border: 1px solid rgba(var(--md-outline-variant), 0.3);
  border-radius: 1rem;
  margin-bottom: 0.5rem;
  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.06);
  position: relative;
  overflow: hidden;
}

.ai-status-row::before {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  height: 2px;
  background: linear-gradient(90deg, 
    transparent 0%, 
    rgba(var(--md-primary), 0.4) 30%,
    rgba(var(--md-secondary), 0.3) 70%,
    transparent 100%
  );
}

.ai-status-row:hover {
  background: linear-gradient(135deg, 
    rgba(var(--md-primary), 0.06) 0%, 
    rgba(var(--md-secondary), 0.03) 100%
  );
  border-color: rgba(var(--md-outline), 0.4);
  box-shadow: 0 4px 16px rgba(0, 0, 0, 0.1);
  transform: translateY(-1px);
}

.status-icon-container {
  position: relative;
  display: flex;
  align-items: center;
  justify-content: center;
  flex-shrink: 0;
}

.status-icon-bg {
  width: 48px;
  height: 48px;
  background: linear-gradient(135deg, 
    rgba(var(--md-primary), 0.12) 0%, 
    rgba(var(--md-secondary), 0.08) 100%
  );
  border: 1px solid rgba(var(--md-primary), 0.2);
  border-radius: 0.875rem;
  display: flex;
  align-items: center;
  justify-content: center;
  color: rgb(var(--md-primary));
  transition: all 0.3s ease;
  box-shadow: 0 2px 8px rgba(var(--md-primary), 0.15);
}

.status-icon-bg:hover {
  background: linear-gradient(135deg, 
    rgba(var(--md-primary), 0.16) 0%, 
    rgba(var(--md-secondary), 0.12) 100%
  );
  transform: scale(1.02);
  box-shadow: 0 4px 12px rgba(var(--md-primary), 0.2);
}

.status-indicator {
  position: absolute;
  top: -2px;
  right: -2px;
  display: flex;
  align-items: center;
  justify-content: center;
  width: 16px;
  height: 16px;
  background: rgb(var(--md-surface));
  border: 1px solid rgba(var(--md-outline-variant), 0.3);
  border-radius: 50%;
  flex-shrink: 0;
  transition: all 0.3s ease;
}

.status-dot {
  width: 10px;
  height: 10px;
  border-radius: 50%;
  background: rgb(var(--md-outline));
  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
  box-shadow: 0 0 0 2px transparent;
}

.status-dot.checking {
  background: rgb(var(--md-warning));
  animation: material-pulse 2s infinite ease-in-out;
  box-shadow: 0 0 0 2px rgba(var(--md-warning), 0.2);
}

.status-dot.connected {
  background: rgb(var(--md-primary));
  box-shadow: 0 0 0 2px rgba(var(--md-primary), 0.2);
  animation: material-success 0.6s ease-out;
}

.status-dot.error {
  background: rgb(var(--md-error));
  box-shadow: 0 0 0 2px rgba(var(--md-error), 0.2);
  animation: material-error 0.6s ease-out;
}

@keyframes material-pulse {
  0%, 100% { 
    opacity: 1; 
    transform: scale(1);
  }
  50% { 
    opacity: 0.7; 
    transform: scale(1.1);
  }
}

@keyframes material-success {
  0% { transform: scale(0.8); opacity: 0.7; }
  50% { transform: scale(1.2); opacity: 1; }
  100% { transform: scale(1); opacity: 1; }
}

@keyframes material-error {
  0%, 20%, 40%, 60%, 80% { transform: translateX(-2px); }
  10%, 30%, 50%, 70%, 90% { transform: translateX(2px); }
  100% { transform: translateX(0); }
}

.status-info {
  flex: 1;
  display: flex;
  flex-direction: column;
  gap: 0.25rem;
  min-width: 0;
  align-items: flex-start;
}

.status-header {
  display: flex;
  align-items: center;
  gap: 0.75rem;
  /* keep label and badge grouped on the left */
  justify-content: flex-start;
}

.status-badge {
  margin-left: 0.5rem;
}

.status-label {
  font-size: 0.9375rem;
  font-weight: 600;
  color: rgb(var(--md-on-surface));
  line-height: 1.2;
  letter-spacing: 0.025em;
}

.status-badge {
  font-size: 0.75rem;
  font-weight: 500;
  color: rgb(var(--md-on-surface-variant));
  background: rgba(var(--md-surface-container-highest), 0.8);
  padding: 0.25rem 0.5rem;
  border-radius: 0.375rem;
  border: 1px solid rgba(var(--md-outline-variant), 0.2);
  line-height: 1.2;
}

.status-description {
  font-size: 0.75rem;
  color: rgb(var(--md-on-surface-variant));
  line-height: 1.3;
  font-weight: 400;
  opacity: 0.8;
}

.check-btn {
  display: flex;
  align-items: center;
  justify-content: center;
  width: 44px;
  height: 44px;
  border: none;
  border-radius: 1rem;
  background: rgb(var(--md-primary-container));
  color: rgb(var(--md-on-primary-container));
  cursor: pointer;
  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
  flex-shrink: 0;
  box-shadow: 0 1px 3px rgba(var(--md-primary), 0.2);
  position: relative;
  overflow: hidden;
  /* push the button to the far right of the status row */
  margin-left: auto;
}

.check-btn::before {
  content: '';
  position: absolute;
  inset: 0;
  background: rgb(var(--md-on-primary-container));
  opacity: 0;
  transition: opacity 0.3s ease;
  border-radius: inherit;
}

.check-btn:hover::before {
  opacity: 0.08;
}

.check-btn:active::before {
  opacity: 0.16;
}

.check-btn:hover {
  background: rgb(var(--md-primary-container));
  box-shadow: 0 2px 8px rgba(var(--md-primary), 0.3);
  transform: translateY(-1px) scale(1.02);
}

.check-btn:active {
  transform: translateY(0) scale(0.98);
  box-shadow: 0 1px 4px rgba(var(--md-primary), 0.2);
}

.check-btn:disabled {
  opacity: 0.6;
  cursor: not-allowed;
  transform: none !important;
  box-shadow: 0 1px 3px rgba(var(--md-primary), 0.1) !important;
}

/* Tidy up inline SVGs inside the small action button to match Material-style icons */
.check-btn svg {
  display: block;
  width: 18px;
  height: 18px;
  stroke-width: 1.5;
  stroke-linecap: round;
  stroke-linejoin: round;
  color: inherit;
}

/* Ensure status text is explicitly left aligned */
.status-info,
.status-info * {
  text-align: left !important;
}

.check-btn:disabled::before {
  opacity: 0 !important;
}

.check-btn svg {
  transition: transform 0.3s cubic-bezier(0.4, 0, 0.2, 1);
}

.check-btn:not(:disabled):hover svg {
  transform: rotate(180deg) scale(1.1);
}

.check-btn:disabled svg {
  animation: spin 1s linear infinite;
}

@keyframes spin {
  from { transform: rotate(0deg); }
  to { transform: rotate(360deg); }
}

.connection-center-icon {
  position: relative;
  z-index: 2;
  width: 48px;
  height: 48px;
  background: linear-gradient(135deg, rgb(var(--md-primary)), rgb(var(--md-secondary)));
  border-radius: 1rem;
  display: flex;
  align-items: center;
  justify-content: center;
  color: rgb(var(--md-on-primary));
  box-shadow: 0 8px 24px rgba(var(--md-primary), 0.3);
  animation: gentle-bounce 4s infinite ease-in-out;
}

@keyframes gentle-bounce {
  0%, 100% {
    transform: translateY(0px);
  }
  50% {
    transform: translateY(-4px);
  }
}

.connection-content {
  flex: 1;
  display: flex;
  flex-direction: column;
  gap: 1.5rem;
}

.connection-header {
  display: flex;
  flex-direction: column;
  gap: 0.75rem;
}

.connection-header h3 {
  margin: 0;
  font-size: 1.5rem;
  font-weight: 700;
  color: rgb(var(--md-on-surface));
  background: linear-gradient(135deg, rgb(var(--md-primary)), rgb(var(--md-secondary)));
  background-clip: text;
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
}

.connection-status-indicator {
  display: flex;
  align-items: center;
  gap: 0.5rem;
}

.status-dot-small {
  width: 8px;
  height: 8px;
  background: rgb(var(--md-primary));
  border-radius: 50%;
  animation: pulse-dot 2s infinite ease-in-out;
}

@keyframes pulse-dot {
  0%, 100% {
    opacity: 1;
    transform: scale(1);
  }
  50% {
    opacity: 0.5;
    transform: scale(1.2);
  }
}

.status-text-small {
  font-size: 0.875rem;
  color: rgb(var(--md-on-surface-variant));
  font-weight: 500;
}

.connection-description {
  opacity: 0.8;
}

.connection-description p {
  margin: 0;
  font-size: 1rem;
  color: rgb(var(--md-on-surface-variant));
  line-height: 1.6;
}

/* Mobile Responsive Styles for Material AI Status Row */
@media (max-width: 640px) {
  .ai-status-row {
    padding: 0.875rem 1rem;
    gap: 0.875rem;
  }

  .status-indicator {
    width: 28px;
    height: 28px;
  }

  .status-dot {
    width: 8px;
    height: 8px;
  }

  .status-label {
    font-size: 0.8125rem;
  }

  .status-text {
    font-size: 0.6875rem;
  }

  .check-btn {
    width: 36px;
    height: 36px;
  }

  .check-btn svg {
    width: 12px;
    height: 12px;
  }
}

@media (max-width: 480px) {
  .ai-status-row {
    padding: 0.75rem 0.875rem;
    gap: 0.75rem;
  }

  .status-indicator {
    width: 24px;
    height: 24px;
  }

  .check-btn {
    width: 32px;
    height: 32px;
  }
}

/* Dark Theme Support for Material AI Status Row */
[data-theme="dark"] .ai-status-row,
[data-theme$="-dark"] .ai-status-row {
  background: rgba(var(--md-surface-container), 0.8);
  border-color: rgba(var(--md-outline-variant), 0.2);
  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
}

[data-theme="dark"] .ai-status-row::before,
[data-theme$="-dark"] .ai-status-row::before {
  background: linear-gradient(90deg, 
    transparent 0%, 
    rgba(var(--md-primary), 0.15) 50%, 
    transparent 100%
  );
}

[data-theme="dark"] .ai-status-row:hover,
[data-theme$="-dark"] .ai-status-row:hover {
  background: rgba(var(--md-surface-container-high), 0.9);
  border-color: rgba(var(--md-outline), 0.3);
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.15);
}

[data-theme="dark"] .status-indicator,
[data-theme$="-dark"] .status-indicator {
  background: rgba(var(--md-surface-container-highest), 0.6);
  border-color: rgba(var(--md-outline-variant), 0.15);
}

[data-theme="dark"] .status-indicator:hover,
[data-theme$="-dark"] .status-indicator:hover {
  background: rgba(var(--md-surface-container-highest), 0.8);
  border-color: rgba(var(--md-outline), 0.25);
}

  .connection-actions-modern {
    justify-content: center;
    gap: 1rem;
  }

  .connection-btn-modern {
    padding: 0.875rem 1.5rem;
    font-size: 0.875rem;
  }

@media (max-width: 480px) {
  .connection-status-modern {
    padding: 1.5rem 1rem;
    gap: 1.25rem;
  }

  .connection-animation-container {
    width: 70px;
    height: 70px;
  }

  .connection-center-icon {
    width: 36px;
    height: 36px;
    font-size: 1.125rem;
  }

  .connection-header h3 {
    font-size: 1.125rem;
  }

  .connection-description p {
    font-size: 0.875rem;
  }

  .connection-btn-modern {
    width: 100%;
    justify-content: center;
  }

  .connection-actions-modern {
    flex-direction: column;
    width: 100%;
  }
}

.ai-success-state {
  background: rgba(var(--md-success-container), 0.1);
  border: 1px solid rgba(var(--md-success), 0.2);
  border-radius: 1.5rem;
  padding: 2rem;
  margin-top: 1.5rem;
}

.success-header {
  display: flex;
  align-items: center;
  gap: 1.5rem;
  margin-bottom: 2rem;
}

.success-icon {
  width: 3rem;
  height: 3rem;
  background: rgba(var(--md-success), 0.15);
  border-radius: 0.75rem;
  display: flex;
  align-items: center;
  justify-content: center;
  color: rgb(var(--md-success));
  flex-shrink: 0;
}

.success-content h3 {
  margin: 0 0 0.25rem 0;
  font-size: 1.2rem;
  font-weight: 700;
  color: rgb(var(--md-on-surface));
}

.success-content p {
  margin: 0;
  font-size: 0.9rem;
  color: rgb(var(--md-on-surface-variant));
}

.models-preview {
  background: rgba(var(--md-surface-container), 0.4);
  border: 1px solid rgba(var(--md-outline-variant), 0.2);
  border-radius: 0.875rem;
  padding: 1rem;
  margin-bottom: 1rem;
  max-height: 200px;
  overflow-y: auto;
}

.model-preview-item {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 0.75rem 0;
  border-bottom: 1px solid rgba(var(--md-outline-variant), 0.1);
}

.model-preview-item:last-child {
  border-bottom: none;
}

.model-preview-info h5 {
  margin: 0 0 0.25rem 0;
  font-size: 0.925rem;
  font-weight: 600;
  color: rgb(var(--md-on-surface));
}

.model-preview-info p {
  margin: 0;
  font-size: 0.8rem;
  color: rgb(var(--md-on-surface-variant));
  opacity: 0.7;
}

.success-actions {
  display: flex;
  gap: 0.75rem;
  flex-wrap: wrap;
}

.action-btn {
  display: inline-flex;
  align-items: center;
  gap: 0.5rem;
  padding: 0.625rem 1rem;
  border-radius: 0.625rem;
  font-size: 0.875rem;
  font-weight: 500;
  cursor: pointer;
  transition: all 0.3s ease;
  border: none;
}

.action-btn.secondary {
  background: rgba(var(--md-surface-variant), 0.6);
  color: rgb(var(--md-on-surface-variant));
  border: 1px solid rgba(var(--md-outline), 0.3);
}

.action-btn.secondary:hover {
  background: rgba(var(--md-surface-variant), 0.8);
  transform: translateY(-1px);
}

.action-btn.primary {
  background: rgb(var(--md-primary));
  color: rgb(var(--md-on-primary));
}

.action-btn.primary:hover {
  background: rgb(var(--md-primary-container));
  color: rgb(var(--md-on-primary-container));
  transform: translateY(-1px);
}

.ai-setup-instructions {
  background: rgba(var(--md-surface-container-low), 0.5);
  border: 1px solid rgba(var(--md-outline-variant), 0.2);
  border-radius: 1.5rem;
  padding: 2.5rem;
}

.setup-header {
  text-align: center;
  margin-bottom: 2rem;
}

.setup-header h3 {
  margin: 0 0 0.75rem 0;
  font-size: 1.4rem;
  font-weight: 700;
  color: rgb(var(--md-on-surface));
}

.setup-header p {
  margin: 0;
  font-size: 1.05rem;
  color: rgb(var(--md-on-surface-variant));
  opacity: 0.8;
  line-height: 1.5;
}

.os-tabs {
  display: flex;
  gap: 0.75rem;
  margin-bottom: 2.5rem;
  background: rgba(var(--md-surface-variant), 0.3);
  border-radius: 1rem;
  padding: 0.5rem;
}

.os-tab {
  flex: 1;
  display: flex;
  align-items: center;
  justify-content: center;
  gap: 0.75rem;
  padding: 1rem 1.25rem;
  background: transparent;
  border: none;
  border-radius: 0.75rem;
  color: rgb(var(--md-on-surface-variant));
  font-size: 1rem;
  font-weight: 500;
  cursor: pointer;
  transition: all 0.3s ease;
}

.os-tab:hover {
  background: rgba(var(--md-surface-variant), 0.5);
}

.os-tab.active {
  background: rgb(var(--md-primary));
  color: rgb(var(--md-on-primary));
  box-shadow: 0 2px 8px rgba(var(--md-primary), 0.3);
}

.os-instructions {
  position: relative;
}

.os-content {
  display: none;
}

.os-content.active {
  display: block;
  animation: fadeInUp 0.4s ease-out;
}

@keyframes fadeInUp {
  from {
    opacity: 0;
    transform: translateY(10px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

.install-steps {
  display: flex;
  flex-direction: column;
  gap: 2rem;
}

.install-step {
  display: flex;
  gap: 1.5rem;
  align-items: flex-start;
}

.step-number {
  width: 2.75rem;
  height: 2.75rem;
  background: linear-gradient(135deg, rgb(var(--md-primary)), rgb(var(--md-secondary)));
  color: rgb(var(--md-on-primary));
  border-radius: 50%;
  display: flex;
  align-items: center;
  justify-content: center;
  font-weight: 700;
  font-size: 1rem;
  flex-shrink: 0;
  box-shadow: 0 4px 12px rgba(var(--md-primary), 0.25);
}

.step-details {
  flex: 1;
}

.step-details h4 {
  margin: 0 0 0.75rem 0;
  font-size: 1.15rem;
  font-weight: 600;
  color: rgb(var(--md-on-surface));
}

.step-details p {
  margin: 0 0 1rem 0;
  font-size: 1rem;
  color: rgb(var(--md-on-surface-variant));
  line-height: 1.6;
}

.download-link {
  display: inline-flex;
  align-items: center;
  gap: 0.75rem;
  padding: 0.875rem 1.5rem;
  background: rgb(var(--md-primary));
  color: rgb(var(--md-on-primary));
  text-decoration: none;
  border-radius: 0.875rem;
  font-weight: 600;
  font-size: 1rem;
  transition: all 0.3s ease;
  box-shadow: 0 4px 12px rgba(var(--md-primary), 0.2);
}

.download-link:hover {
  background: rgb(var(--md-primary-container));
  color: rgb(var(--md-on-primary-container));
  transform: translateY(-2px);
  box-shadow: 0 8px 24px rgba(var(--md-primary), 0.3);
  text-decoration: none;
}

.command-block {
  position: relative;
  background: rgba(var(--md-surface-container-highest), 0.9);
  border: 1px solid rgba(var(--md-outline-variant), 0.3);
  border-radius: 0.875rem;
  padding: 1.25rem 3.5rem 1.25rem 1.25rem;
  font-family: 'SF Mono', 'Monaco', 'Inconsolata', 'Roboto Mono', monospace;
  margin: 0.75rem 0;
  display: flex;
  align-items: center;
  gap: 1rem;
}

.command-block code {
  color: rgb(var(--md-primary));
  font-weight: 600;
  font-size: 1rem;
  flex: 1;
}

.copy-command {
  position: absolute;
  top: 0.5rem;
  right: 0.5rem;
  background: rgba(var(--md-surface), 0.9);
  border: 1px solid rgba(var(--md-outline-variant), 0.3);
  border-radius: 0.375rem;
  padding: 0.5rem;
  color: rgb(var(--md-on-surface-variant));
  cursor: pointer;
  transition: all 0.25s ease;
  display: flex;
  align-items: center;
  justify-content: center;
}

.copy-command:hover {
  background: rgba(var(--md-primary), 0.1);
  color: rgb(var(--md-primary));
  border-color: rgba(var(--md-primary), 0.3);
  transform: translateY(-1px);
}

.setup-help {
  margin-top: 2rem;
  padding-top: 1.75rem;
  border-top: 1px solid rgba(var(--md-outline-variant), 0.2);
}

.help-links {
  display: flex;
  justify-content: center;
  gap: 1.5rem;
  flex-wrap: wrap;
}

.help-link {
  display: inline-flex;
  align-items: center;
  gap: 0.5rem;
  padding: 0.5rem 0.75rem;
  background: rgba(var(--md-surface-variant), 0.5);
  color: rgb(var(--md-on-surface-variant));
  text-decoration: none;
  border: 1px solid rgba(var(--md-outline), 0.3);
  border-radius: 0.5rem;
  font-size: 0.875rem;
  font-weight: 500;
  cursor: pointer;
  transition: all 0.3s ease;
}

.help-link:hover {
  background: rgba(var(--md-surface-variant), 0.7);
  color: rgb(var(--md-on-surface));
  text-decoration: none;
  transform: translateY(-1px);
}

.troubleshooting-section {
  margin-top: 1.5rem;
  padding: 1.5rem;
  background: rgba(var(--md-warning-container), 0.1);
  border: 1px solid rgba(var(--md-warning), 0.2);
  border-radius: 1rem;
}

.troubleshooting-section h4 {
  margin: 0 0 1rem 0;
  font-size: 1.1rem;
  font-weight: 600;
  color: rgb(var(--md-on-surface));
}

.trouble-items {
  display: flex;
  flex-direction: column;
  gap: 1rem;
}

.trouble-item {
  padding: 1rem;
  background: rgba(var(--md-surface-container), 0.4);
  border: 1px solid rgba(var(--md-outline-variant), 0.2);
  border-radius: 0.75rem;
}

.trouble-item h5 {
  margin: 0 0 0.5rem 0;
  font-size: 0.95rem;
  font-weight: 600;
  color: rgb(var(--md-on-surface));
}

.trouble-item p {
  margin: 0;
  font-size: 0.875rem;
  color: rgb(var(--md-on-surface-variant));
  line-height: 1.5;
}

.trouble-item code {
  background: rgba(var(--md-surface-container-highest), 0.8);
  padding: 0.25rem 0.5rem;
  border-radius: 0.25rem;
  font-family: 'Monaco', 'Menlo', 'Ubuntu Mono', monospace;
  font-size: 0.8rem;
  color: rgb(var(--md-primary));
  font-weight: 500;
}

.trouble-item a {
  color: rgb(var(--md-primary));
  text-decoration: none;
  font-weight: 500;
}

.trouble-item a:hover {
  text-decoration: underline;
}

.skip-option {
  background: rgba(var(--md-tertiary-container), 0.1);
  border: 1px solid rgba(var(--md-tertiary), 0.2);
  border-radius: 1rem;
  overflow: hidden;
}

.skip-content {
  padding: 1.25rem;
  display: flex;
  align-items: flex-start;
  gap: 0.75rem;
}

.skip-content svg {
  color: rgb(var(--md-tertiary));
  flex-shrink: 0;
  margin-top: 0.125rem;
}

.skip-content p {
  margin: 0;
  font-size: 0.875rem;
  color: rgb(var(--md-on-surface-variant));
  line-height: 1.5;
}

/* Mobile responsive adjustments for AI setup */
@media (max-width: 768px) {
  .ai-setup-redesigned {
    gap: 2rem;
    padding: 0.5rem 0;
  }

  .connection-status-card {
    flex-direction: column;
    text-align: center;
    gap: 1.5rem;
    padding: 2rem;
  }
  
  .connection-actions {
    flex-direction: column;
    width: 100%;
    gap: 1rem;
  }
  
  .connection-btn {
    width: 100%;
    justify-content: center;
    padding: 1rem 1.25rem;
  }
  
  .ai-setup-instructions {
    padding: 2rem;
  }
  
  .os-tabs {
    flex-direction: column;
    gap: 0.5rem;
    margin-bottom: 2rem;
  }
  
  .os-tab {
    padding: 1rem;
  }
  
  .install-steps {
    gap: 1.5rem;
  }
  
  .install-step {
    gap: 1rem;
  }
  
  .step-details h4 {
    font-size: 1.05rem;
  }
  
  .help-links {
    flex-direction: column;
    align-items: center;
    gap: 1rem;
  }
  
  .success-header {
    flex-direction: column;
    text-align: center;
    gap: 1rem;
  }
  
  .success-actions {
    flex-direction: column;
    gap: 1rem;
  }
  
  .action-btn {
    width: 100%;
    justify-content: center;
  }
}

@media (max-width: 480px) {
  .ai-setup-redesigned {
    gap: 1.5rem;
  }
  
  .connection-status-card {
    padding: 1.5rem;
  }
  
  .ai-setup-instructions {
    padding: 1.5rem;
  }
  
  .setup-header h3 {
    font-size: 1.2rem;
  }
  
  .command-block {
    padding: 1rem 3rem 1rem 1rem;
  }
  
  .command-block code {
    font-size: 0.9rem;
  }
  
  .copy-command {
    top: 0.375rem;
    right: 0.375rem;
    padding: 0.375rem;
  }
  
  .trouble-item {
    padding: 0.875rem;
  }
  
  .step-number {
    width: 2rem;
    height: 2rem;
    font-size: 0.8rem;
  }
}
</style>

<script>
// @ts-nocheck
// Plain-JS onboarding logic (no TypeScript syntax)
/**
 * Lightweight typing hints so Astro's TS analyzer doesn't complain.
 * These are ignored at runtime but silence editor diagnostics.
 */
interface AccentCfg {
  bg: string;
  primary: string;
  surface: string;
  surfaceVariant: string;
}

interface AccentMap {
  [k: string]: AccentCfg;
}

declare global {
  interface Window {
    __smileOnboardingInstance: any;
  }
}

class OnboardingFlow {
  currentStep = 1;
  totalSteps = 6;
  selectedAccent = 'smile';
  selectedMode = 'auto';
  encryptionEnabled = false;
  profileData = {};
  
  constructor() {
    this.init();
    this.detectSystem();
  }

  init() {
    this.updateProgress();
    this.updateNavigation();
    this.setupEventListeners();
  }

  detectSystem() {
    const systemInfo = document.getElementById('system-info');
    if (!systemInfo) return;
    const userAgent = navigator.userAgent.toLowerCase();
    let os = 'Unknown';
    let icon = '💻';
    if (userAgent.includes('linux')) { os = 'Linux'; icon = '🐧'; }
    else if (userAgent.includes('mac')) { os = 'macOS'; icon = '🍎'; }
    else if (userAgent.includes('win')) { os = 'Windows'; icon = '🪟'; }
    systemInfo.innerHTML = `<span class="system-badge">${icon} ${os} detected</span>`;
  }

  setupEventListeners() {
    // Navigation buttons
    const prevBtn = document.getElementById('prev-btn');
    const nextBtn = document.getElementById('next-btn');
    const finishBtn = document.getElementById('finish-btn');
    if (prevBtn) prevBtn.addEventListener('click', () => this.prevStep());
    if (nextBtn) nextBtn.addEventListener('click', () => this.nextStep());
    if (finishBtn) finishBtn.addEventListener('click', () => this.finish());

    // Mode selection
    const modeChips = document.querySelectorAll('.mode-chip');
    modeChips.forEach(chip => {
      chip.addEventListener('click', () => {
        modeChips.forEach(c => c.classList.remove('selected'));
        chip.classList.add('selected');
        this.selectedMode = chip.getAttribute('data-mode') || 'auto';
        this.applyTheme();
      });
    });

    // Theme selection
    const themeChips = document.querySelectorAll('.theme-chip');
    themeChips.forEach(chip => {
      chip.addEventListener('click', () => {
        themeChips.forEach(c => c.classList.remove('selected'));
        chip.classList.add('selected');
        this.selectedAccent = chip.getAttribute('data-theme') || 'smile';
        this.applyTheme();
      });
    });

    // Security settings
    const encryptionToggle = document.getElementById('onboarding-encryption');
    if (encryptionToggle) {
      // Initialize from real security settings
      try {
        import('../utils/secure-storage.ts').then(mod => {
          const storage = mod.default.getInstance();
          const settings = storage.getSecuritySettings();
          (encryptionToggle as HTMLInputElement).checked = !!settings.encryptionEnabled;
          this.encryptionEnabled = !!settings.encryptionEnabled;
        }).catch(() => {/* ignore */});
      } catch {}

      encryptionToggle.addEventListener('change', () => {
        // Record intent; actual enablement occurs when password is set
        this.encryptionEnabled = (encryptionToggle as HTMLInputElement).checked;

        // If user toggles ON during onboarding, immediately prompt to set a password
        if (this.encryptionEnabled) {
          const tryShow = () => {
            if (window.smileApp && typeof window.smileApp.showPasswordModal === 'function') {
              window.smileApp.showPasswordModal('set');
            } else {
              // Poll briefly if app not ready yet
              let attempts = 0;
              const id = setInterval(() => {
                attempts++;
                if (window.smileApp && typeof window.smileApp.showPasswordModal === 'function') {
                  clearInterval(id);
                  window.smileApp.showPasswordModal('set');
                }
                if (attempts > 10) clearInterval(id);
              }, 100);
            }
          };
          tryShow();
        }
      });
    }

    // Profile data collection
    const nameInput = document.getElementById('onboarding-name');
    if (nameInput) {
      nameInput.addEventListener('input', () => {
        this.profileData.name = nameInput.value;
      });
    }

    // Goals textarea with character counter
    const goalsTextarea = document.getElementById('onboarding-goals');
    const charCount = document.querySelector('.char-count');
    if (goalsTextarea && charCount) {
      goalsTextarea.addEventListener('input', () => {
        this.profileData.goals = goalsTextarea.value;
        const count = goalsTextarea.value.length;
        charCount.textContent = count.toString();
        
        // Change color as approaching limit
        if (count > 450) {
          charCount.style.color = 'rgb(var(--md-error))';
        } else if (count > 400) {
          charCount.style.color = 'rgb(var(--md-warning))';
        } else {
          charCount.style.color = 'rgb(var(--md-primary))';
        }
      });
    }

    // AI status check
    const checkBtn = document.getElementById('check-ai-status');
    if (checkBtn) checkBtn.addEventListener('click', () => this.checkAIStatus());

    // Copy buttons
    const copyBtns = document.querySelectorAll('.copy-btn');
    copyBtns.forEach((btn) => {
      btn.addEventListener('click', async () => {
        const copyText = btn.getAttribute('data-copy');
        if (!copyText) return;
        try {
          await navigator.clipboard.writeText(copyText);
          const originalHTML = btn.innerHTML;
          btn.innerHTML = `<svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"><polyline points="20,6 9,17 4,12"/></svg>`;
          setTimeout(() => { btn.innerHTML = originalHTML; }, 2000);
          if (window.smileApp && typeof window.smileApp.showCustomNotification === 'function') {
            window.smileApp.showCustomNotification('Copied to clipboard!', 'success');
          }
        } catch (err) {
          console.error('Failed to copy text:', err);
          if (window.smileApp && typeof window.smileApp.showCustomNotification === 'function') {
            window.smileApp.showCustomNotification('Failed to copy text', 'error');
          }
        }
      });
    });

    // Default theme selection and preview
    const defaultChip = document.querySelector('.theme-chip[data-theme="smile"]');
    if (defaultChip) defaultChip.classList.add('selected');
    this.updateThemePreview('smile');
  }

  updateThemePreview(accent: string) {
    const preview = document.getElementById('theme-live-preview');
    if (!preview) return;
    const themeConfig: AccentMap = {
      smile: { bg: 'linear-gradient(135deg,#3b82f6,#1e40af)', primary: 'rgba(30,64,175,.55)', surface: 'rgba(255,255,255,.55)', surfaceVariant: 'rgba(255,255,255,.38)' },
      forest: { bg: 'linear-gradient(135deg,#10b981,#047857)', primary: 'rgba(4,120,87,.55)', surface: 'rgba(255,255,255,.55)', surfaceVariant: 'rgba(255,255,255,.38)' },
      sunset: { bg: 'linear-gradient(135deg,#f97316,#ea580c)', primary: 'rgba(234,88,12,.55)', surface: 'rgba(255,255,255,.55)', surfaceVariant: 'rgba(255,255,255,.38)' },
      lavender: { bg: 'linear-gradient(135deg,#a855f7,#7c3aed)', primary: 'rgba(124,58,237,.55)', surface: 'rgba(255,255,255,.55)', surfaceVariant: 'rgba(255,255,255,.38)' },
    };
    const cfg: AccentCfg | undefined = themeConfig[accent];
    if (!cfg) return;
    preview.style.setProperty('--tlp-bg', cfg.bg);
    preview.style.setProperty('--tlp-primary', cfg.primary);
    preview.style.setProperty('--tlp-surface', cfg.surface);
    preview.style.setProperty('--tlp-surface-variant', cfg.surfaceVariant);
  }

  applyTheme(){
    this.updateThemePreview(this.selectedAccent);
    localStorage.setItem('smile-accent-color', this.selectedAccent);
    localStorage.setItem('smile-theme-mode', this.selectedMode);
    const prefersDark = window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches;
    const themeName = this.selectedMode === 'dark' ? `${this.selectedAccent}-dark` : (this.selectedMode === 'auto' ? (prefersDark ? `${this.selectedAccent}-dark` : this.selectedAccent) : this.selectedAccent);
    if (window.smileApp && typeof window.smileApp.setTheme === 'function') {
      window.smileApp.setTheme(themeName);
    } else {
      document.documentElement.setAttribute('data-theme', themeName);
      localStorage.setItem('smile-theme', themeName);
    }
  }

  prevStep() {
    if (this.currentStep > 1) {
      this.currentStep--;
      this.updateStep();
    }
  }

  nextStep() {
    if (this.currentStep < this.totalSteps) {
      this.currentStep++;
      this.updateStep();
    }
  }

  updateStep() {
    const steps = document.querySelectorAll('.step-content');
    steps.forEach((step) => step.classList.remove('active'));
    const current = document.querySelector(`[data-step="${this.currentStep}"]`);
    if (current) current.classList.add('active');
    
    // Apply theme when reaching the final step to ensure it displays correctly
    if (this.currentStep === this.totalSteps) {
      this.applyTheme();
    }
    
    this.updateProgress();
    this.updateNavigation();
  }

  updateProgress() {
  const progressFill = document.querySelector('.onboarding-progress-fill');
  const progressText = document.querySelector('.onboarding-progress-text');
    if (progressFill) {
      const pct = (this.currentStep / this.totalSteps) * 100;
  /** @type {HTMLElement} */(progressFill).style.width = `${pct}%`;
      const bar = document.querySelector('.onboarding-progress-bar');
      if (bar) bar.setAttribute('aria-valuenow', String(this.currentStep));
    }
    if (progressText) {
      progressText.textContent = `Step ${this.currentStep} of ${this.totalSteps}`;
    }
  }

  updateNavigation() {
    const prevBtn = document.getElementById('prev-btn');
    const nextBtn = document.getElementById('next-btn');
    const finishBtn = document.getElementById('finish-btn');
    if (prevBtn) prevBtn.style.display = this.currentStep > 1 ? 'flex' : 'none';
    if (nextBtn) nextBtn.style.display = this.currentStep < this.totalSteps ? 'flex' : 'none';
    if (finishBtn) finishBtn.style.display = this.currentStep === this.totalSteps ? 'flex' : 'none';
  }

  async checkAIStatus() {
    const resultEl = document.getElementById('ai-status-result');
    if (!resultEl) return;
  resultEl.innerHTML = `<div style="display:flex;align-items:flex-start;gap:.75rem;color:rgb(var(--md-primary));"><svg width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.6" style="animation: spin 1s linear infinite; opacity:0.9; flex-shrink:0;"><path d="M21 12a9 9 0 11-6.219-8.56"/></svg><div style="line-height:1.25;">Checking AI status...</div></div>`;
    try {
      const response = await fetch('/api/ollama-health');
      if (!response.ok) throw new Error('Ollama not running');
      const data = await response.json();
      const models = data.models || [];
      const hasRecommendedModel = models.some((m: any) => (m.name||'').includes('llama') || (m.name||'').includes('gpt') || (m.name||'').includes('mistral'));
      if (hasRecommendedModel) {
  resultEl.innerHTML = `<div style="display:flex;align-items:flex-start;gap:.75rem;color:rgb(var(--md-success));"><svg width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.6"><polyline points="20,6 9,17 4,12"/></svg><div style="line-height:1.25;">AI engine ready! Found ${models.length} model(s).</div></div>`;
      } else if (models.length > 0) {
  resultEl.innerHTML = `<div style="display:flex;align-items:flex-start;gap:.75rem;color:rgb(var(--md-warning));"><svg width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.6"><path d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z"/></svg><div style="line-height:1.25;">Ollama running with ${models.length} model(s), but no recommended models found.</div></div>`;
      } else {
  resultEl.innerHTML = `<div style="display:flex;align-items:flex-start;gap:.75rem;color:rgb(var(--md-warning));"><svg width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.6"><path d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z"/></svg><div style="line-height:1.25;">Ollama running, but no models found. Please download a model.</div></div>`;
      }
    } catch (err) {
  resultEl.innerHTML = `<div style="display:flex;align-items:flex-start;gap:.75rem;color:rgb(var(--md-error));"><svg width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.6"><circle cx="12" cy="12" r="10"/><line x1="15" y1="9" x2="9" y2="15"/><line x1="9" y1="9" x2="15" y2="15"/></svg><div style="line-height:1.25;color:rgb(var(--md-on-surface));">Ollama not found. Please install and set up Ollama.</div></div>`;
    }
  }

  finish() {
    // Collect final profile data
    const nameInput = document.getElementById('onboarding-name');
    const goalsTextarea = document.getElementById('onboarding-goals');
    
    if (nameInput) this.profileData.name = nameInput.value;
    if (goalsTextarea) this.profileData.goals = goalsTextarea.value;

    // Collect all onboarding data
    const onboardingData = {
      theme: this.selectedAccent,
      mode: this.selectedMode,
      encryption: this.encryptionEnabled,
      profile: this.profileData,
      completedAt: new Date().toISOString()
    };

    // Persist onboarding state and data
    const prefersDark = window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches;
    const themeName = this.selectedMode === 'dark' ? `${this.selectedAccent}-dark` : (this.selectedMode === 'auto' ? (prefersDark ? `${this.selectedAccent}-dark` : this.selectedAccent) : this.selectedAccent);
    
    // Save all settings
    localStorage.setItem('smile-accent-color', this.selectedAccent);
    localStorage.setItem('smile-theme-mode', this.selectedMode);
    localStorage.setItem('smile-theme', themeName);
    localStorage.setItem('smile-onboarding', 'complete');
    localStorage.setItem('smile-onboarding-data', JSON.stringify(onboardingData));
    // Do not write fake encryption flags here; encryption is managed by secure-storage
    
    if (this.profileData.name) {
      localStorage.setItem('smile-user-name', this.profileData.name);
    }
    
    if (this.profileData.goals) {
      localStorage.setItem('smile-wellness-goals', this.profileData.goals);
    }

    // Apply the theme to ensure the completion screen uses the right colors
    if (window.smileApp && typeof window.smileApp.setTheme === 'function') {
      window.smileApp.setTheme(themeName);
    } else {
      document.documentElement.setAttribute('data-theme', themeName);
    }

    // Close modal
    const modal = document.getElementById('onboarding-modal');
    if (modal) {
      modal.classList.remove('show');
      setTimeout(() => { modal.style.display = 'none'; }, 300);
    }
    
    // Show success notification
    if (window.smileApp && typeof window.smileApp.showCustomNotification === 'function') {
      window.smileApp.showCustomNotification('Welcome to Smiley! Setup complete.', 'success');
    }

    // If user toggled encryption during onboarding and it's not yet enabled, show setup modal
    if (this.encryptionEnabled && window.smileApp && typeof window.smileApp.showPasswordModal === 'function') {
      try {
        import('../utils/secure-storage.ts').then(mod => {
          const storage = mod.default.getInstance();
          const alreadyEnabled = storage.getSecuritySettings().encryptionEnabled;
          if (!alreadyEnabled) {
            setTimeout(() => window.smileApp.showPasswordModal('set'), 400);
          }
        }).catch(() => {
          // Fallback: attempt to show modal
          setTimeout(() => window.smileApp.showPasswordModal('set'), 400);
        });
      } catch {
        setTimeout(() => window.smileApp.showPasswordModal('set'), 400);
      }
    }
  }
}

// Initialize when DOM is ready
document.addEventListener('DOMContentLoaded', () => {
  if (!window.__smileOnboardingInstance) {
    window.__smileOnboardingInstance = new OnboardingFlow();
  }
});

// Add spinning animation for loading states
const style = document.createElement('style');
style.textContent = `@keyframes spin { from { transform: rotate(0deg); } to { transform: rotate(360deg); } }`;
document.head.appendChild(style);

// New AI Setup Functions for Redesigned Interface

// Global function to check Ollama connection
window.checkOllamaConnection = async function() {
  // Updated selectors for minimal AI status row
  const statusDot = document.getElementById('status-dot');
  const statusMessage = document.getElementById('connection-message');
  const successState = document.getElementById('ai-success-state');
  const setupInstructions = document.getElementById('ai-setup-instructions');
  const checkBtn = document.getElementById('check-connection-btn');
  
  if (!statusDot || !statusMessage) return;
  
  // Show checking state
  statusDot.className = 'status-dot checking';
  statusMessage.textContent = 'Checking...';
  
  if (checkBtn) {
    checkBtn.disabled = true;
    checkBtn.innerHTML = `
      <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" style="animation: spin 1s linear infinite;">
        <path d="M21 12a9 9 0 11-6.219-8.56"/>
      </svg>
    `;
  }
  
  try {
    const response = await fetch('http://localhost:11434/api/tags');
    
    if (response.ok) {
      const data = await response.json();
      const models = data.models || [];
      
      // Show success state
      setTimeout(() => {
        statusDot.className = 'status-dot connected';
        statusMessage.textContent = `Connected • ${models.length} models`;
        
        // Show success state and hide instructions
        if (successState) {
          successState.classList.remove('hidden');
          updateModelsDisplay(models);
        }
        if (setupInstructions) {
          setupInstructions.classList.add('hidden');
        }
        
        // Reset button
        if (checkBtn) {
          checkBtn.disabled = false;
          checkBtn.innerHTML = `
            <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
              <path d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"/>
            </svg>
          `;
        }
        
        // Enable next step
        const nextBtn = document.querySelector('.nav-btn.primary[onclick*="nextStep"]');
        if (nextBtn) {
          nextBtn.disabled = false;
          nextBtn.textContent = 'Continue';
        }
      }, 800);
      
    } else {
      throw new Error('Ollama not responding');
    }
  } catch (error) {
    // Show error state
    setTimeout(() => {
      statusDot.className = 'status-dot error';
      statusMessage.textContent = 'Not found';
      
      // Hide success state and show instructions
      if (successState) {
        successState.classList.add('hidden');
      }
      if (setupInstructions) {
        setupInstructions.classList.remove('hidden');
      }
      
      // Reset button
      if (checkBtn) {
        checkBtn.disabled = false;
        checkBtn.innerHTML = `
          <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
            <path d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"/>
          </svg>
        `;
      }
    }, 800);
  }
};

// Function to show setup instructions
window.showSetupInstructions = function() {
  const setupInstructions = document.getElementById('ai-setup-instructions');
  const successState = document.getElementById('ai-success-state');
  
  if (setupInstructions) {
    setupInstructions.classList.remove('hidden');
  }
  if (successState) {
    successState.classList.add('hidden');
  }
};

// Function to update models display
function updateModelsDisplay(models) {
  const modelCountDisplay = document.getElementById('model-count-display');
  const modelsPreview = document.getElementById('models-preview');
  const downloadModelBtn = document.getElementById('download-model-btn');
  
  if (modelCountDisplay) {
    modelCountDisplay.textContent = models.length.toString();
  }
  
  if (modelsPreview) {
    if (models.length === 0) {
      modelsPreview.innerHTML = `
        <div style="text-align: left; padding: 1.25rem; color: rgb(var(--md-on-surface-variant)); font-size: 0.875rem; display:flex; gap:0.75rem; align-items:flex-start;">
          <svg width="40" height="40" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" style="opacity: 0.6; flex-shrink:0;">
            <rect x="3" y="3" width="18" height="18" rx="2" ry="2"/>
            <circle cx="9" cy="9" r="2"/>
            <path d="M21 15l-3.086-3.086a2 2 0 00-2.828 0L6 21"/>
          </svg>
          <div style="line-height:1.4;">
            <p style="margin:0; font-weight:600; color: rgb(var(--md-on-surface));">No models downloaded yet</p>
            <p style="margin:0; color: rgb(var(--md-on-surface-variant));">Download a model to get started with AI conversations.</p>
          </div>
        </div>
      `;
    } else {
      modelsPreview.innerHTML = models.map(model => `
        <div class="model-preview-item">
          <div class="model-preview-info">
            <h5>${model.name}</h5>
            <p>Size: ${formatBytes(model.size)} • Modified: ${formatDate(model.modified_at)}</p>
          </div>
        </div>
      `).join('');
    }
  }
  
  if (downloadModelBtn) {
    downloadModelBtn.style.display = models.length === 0 ? 'block' : 'none';
  }
}

// Helper function to format bytes
function formatBytes(bytes) {
  if (bytes === 0) return '0 B';
  const k = 1024;
  const sizes = ['B', 'KB', 'MB', 'GB', 'TB'];
  const i = Math.floor(Math.log(bytes) / Math.log(k));
  return Math.round(bytes / Math.pow(k, i) * 100) / 100 + ' ' + sizes[i];
}

// Helper function to format date
function formatDate(dateString) {
  const date = new Date(dateString);
  return date.toLocaleDateString();
}

// Function to switch OS tabs
window.switchOSTab = function(os) {
  const tabs = document.querySelectorAll('.os-tab');
  const contents = document.querySelectorAll('.os-content');
  
  tabs.forEach(tab => {
    tab.classList.remove('active');
    if (tab.getAttribute('data-os') === os) {
      tab.classList.add('active');
    }
  });
  
  contents.forEach(content => {
    content.classList.remove('active');
    if (content.getAttribute('data-os') === os) {
      content.classList.add('active');
    }
  });
};

// Function to copy text to clipboard
window.copyToClipboard = async function(text) {
  try {
    await navigator.clipboard.writeText(text);
    if (window.smileApp && typeof window.smileApp.showCustomNotification === 'function') {
      window.smileApp.showCustomNotification('Copied to clipboard!', 'success');
    }
  } catch (err) {
    console.error('Failed to copy text:', err);
    if (window.smileApp && typeof window.smileApp.showCustomNotification === 'function') {
      window.smileApp.showCustomNotification('Failed to copy text', 'error');
    }
  }
};

// Function to refresh Ollama models
window.refreshOllamaModels = function() {
  window.checkOllamaConnection();
};

// Function to download recommended model
window.downloadRecommendedModel = function() {
  const command = 'ollama pull llama3.2';
  window.copyToClipboard(command);
  if (window.smileApp && typeof window.smileApp.showCustomNotification === 'function') {
    window.smileApp.showCustomNotification('Command copied! Run it in your terminal to download the model.', 'info');
  }
};

// Function to toggle troubleshooting section
window.toggleTroubleshooting = function() {
  const troubleshootingSection = document.getElementById('troubleshooting-section');
  if (troubleshootingSection) {
    troubleshootingSection.classList.toggle('hidden');
  }
};

// Auto-detect OS and select appropriate tab
document.addEventListener('DOMContentLoaded', () => {
  const userAgent = navigator.userAgent.toLowerCase();
  let detectedOS = 'windows'; // default
  
  if (userAgent.includes('mac')) {
    detectedOS = 'mac';
  } else if (userAgent.includes('linux')) {
    detectedOS = 'linux';
  }
  
  // Switch to detected OS tab
  window.switchOSTab(detectedOS);
});
</script>
