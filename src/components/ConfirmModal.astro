---
// ConfirmModal component for delete confirmations
---

<!-- Confirmation Modal for Delete Actions -->
<div id="confirm-modal" class="confirm-modal hidden">
  <div class="confirm-modal-backdrop"></div>
  <div class="confirm-modal-container">
    <div class="confirm-modal-content">
      
      <!-- Modal Header -->
      <div class="confirm-modal-header">
        <div class="confirm-modal-icon">
          <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L4.082 16.5c-.77.833.192 2.5 1.732 2.5z"/>
          </svg>
        </div>
        <div class="confirm-modal-text">
          <h3 class="confirm-modal-title">Delete Item</h3>
          <p class="confirm-modal-message">This action cannot be undone. Are you sure you want to delete this item?</p>
        </div>
      </div>

      <!-- Modal Actions -->
      <div class="confirm-modal-actions">
        <button id="confirm-cancel-btn" class="confirm-btn confirm-btn-secondary">
          <span>Cancel</span>
        </button>
        <button id="confirm-delete-btn" class="confirm-btn confirm-btn-danger">
          <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1-1H8a1 1 0 00-1 1v3M4 7h16"/>
          </svg>
          <span>Delete</span>
        </button>
      </div>
    </div>
  </div>
</div>

<script>
  // Confirmation Modal Functionality
  class ConfirmModalManager {
    private modal: HTMLElement | null;
    private cancelBtn: HTMLElement | null;
    private deleteBtn: HTMLElement | null;
    private titleElement: HTMLElement | null;
    private messageElement: HTMLElement | null;
    private currentCallback: ((data: any) => void) | null;
    private currentData: any;

    constructor() {
      this.modal = document.getElementById('confirm-modal');
      this.cancelBtn = document.getElementById('confirm-cancel-btn');
      this.deleteBtn = document.getElementById('confirm-delete-btn');
      this.titleElement = this.modal?.querySelector('.confirm-modal-title') as HTMLElement | null;
      this.messageElement = this.modal?.querySelector('.confirm-modal-message') as HTMLElement | null;
      this.currentCallback = null;
      this.currentData = null;
      
      this.init();
    }

    init() {
      // Cancel button
      this.cancelBtn?.addEventListener('click', () => {
        this.hide();
      });

      // Delete button
      this.deleteBtn?.addEventListener('click', () => {
        if (this.currentCallback) {
          this.currentCallback(this.currentData);
        }
        this.hide();
      });

      // Close on backdrop click
      this.modal?.querySelector('.confirm-modal-backdrop')?.addEventListener('click', () => {
        this.hide();
      });

      // Close on escape key
      document.addEventListener('keydown', (e) => {
        if (e.key === 'Escape' && this.modal?.classList.contains('show')) {
          this.hide();
        }
      });
    }

    show(options: {
      title?: string,
      message?: string,
      onConfirm?: ((data: any) => void) | null,
      data?: any
    } = {}) {
      const {
        title = 'Delete Item',
        message = 'This action cannot be undone. Are you sure you want to delete this item?',
        onConfirm = null,
        data = null
      } = options;

      if (this.titleElement) this.titleElement.textContent = title;
      if (this.messageElement) this.messageElement.textContent = message;
      
      this.currentCallback = onConfirm;
      this.currentData = data;

      this.modal?.classList.remove('hidden');
      setTimeout(() => {
        this.modal?.classList.add('show');
      }, 10);
    }

    hide() {
      this.modal?.classList.remove('show');
      setTimeout(() => {
        this.modal?.classList.add('hidden');
        this.currentCallback = null;
        this.currentData = null;
      }, 300);
    }
  }

  // Initialize modal manager
  let confirmModal: ConfirmModalManager;
  
  document.addEventListener('DOMContentLoaded', () => {
    confirmModal = new ConfirmModalManager();
    
    // Make it globally available
    (window as any).confirmModal = confirmModal;

    // Add delete handlers for all panels
    setupDeleteHandlers();
  });

  function setupDeleteHandlers() {
    // Memory delete handlers
    document.querySelectorAll('.memory-delete-btn').forEach(btn => {
      btn.addEventListener('click', (e) => {
        e.stopPropagation();
        const memoryId = (btn as HTMLElement).dataset.memoryId;
        const memoryCard = btn.closest('.memory-card');
        const memoryText = memoryCard?.querySelector('.memory-excerpt')?.textContent?.substring(0, 50) + '...';
        
        confirmModal.show({
          title: 'Delete Memory',
          message: `Are you sure you want to delete this memory? "${memoryText}" This action cannot be undone.`,
          onConfirm: () => deleteMemory(memoryId || '', memoryCard as HTMLElement),
          data: { id: memoryId, element: memoryCard }
        });
      });
    });

    // Journal delete handlers
    document.querySelectorAll('.journal-delete-btn').forEach(btn => {
      btn.addEventListener('click', (e) => {
        e.stopPropagation();
        const journalId = (btn as HTMLElement).dataset.journalId;
        const journalCard = btn.closest('.journal-entry-card-enhanced');
        const journalTitle = journalCard?.querySelector('.journal-entry-title')?.textContent || 'this entry';
        
        confirmModal.show({
          title: 'Delete Journal Entry',
          message: `Are you sure you want to delete "${journalTitle}"? This action cannot be undone.`,
          onConfirm: () => deleteJournalEntry(journalId || '', journalCard as HTMLElement),
          data: { id: journalId, element: journalCard }
        });
      });
    });

    // History delete handlers
    document.querySelectorAll('.history-delete-btn').forEach(btn => {
      btn.addEventListener('click', (e) => {
        e.stopPropagation();
        const conversationId = (btn as HTMLElement).dataset.conversationId;
        const conversationCard = btn.closest('.memory-card');
        const conversationExcerpt = conversationCard?.querySelector('.memory-excerpt')?.textContent?.substring(0, 50) + '...' || 'this conversation';
        
        confirmModal.show({
          title: 'Delete Conversation',
          message: `Are you sure you want to delete this conversation? "${conversationExcerpt}" This action cannot be undone and will remove all messages from this conversation.`,
          onConfirm: () => deleteConversation(conversationId || '', conversationCard as HTMLElement),
          data: { id: conversationId, element: conversationCard }
        });
      });
    });
  }

  // Delete functions (placeholder implementations)
  function deleteMemory(memoryId: string, element: HTMLElement | null) {
    console.log(`Deleting memory: ${memoryId}`);
    // Animate out
    if (element) {
      element.style.transform = 'scale(0.8)';
      element.style.opacity = '0';
      setTimeout(() => {
        element.remove();
        updateMemoryCount();
      }, 300);
    }
  }

  function deleteJournalEntry(journalId: string, element: HTMLElement | null) {
    console.log(`Deleting journal entry: ${journalId}`);
    // Animate out
    if (element) {
      element.style.transform = 'translateX(-100%)';
      element.style.opacity = '0';
      setTimeout(() => {
        element.remove();
        updateJournalCount();
      }, 300);
    }
  }

  function deleteConversation(conversationId: string, element: HTMLElement | null) {
    console.log(`Deleting conversation: ${conversationId}`);
    // Animate out
    if (element) {
      element.style.transform = 'scale(0.8)';
      element.style.opacity = '0';
      setTimeout(() => {
        element.remove();
        updateHistoryCount();
      }, 300);
    }
  }

  // Update count functions
  function updateMemoryCount() {
    const count = document.querySelectorAll('#panel-memories .memory-card').length;
    const countElement = document.querySelector('#panel-memories .section-count');
    if (countElement) countElement.textContent = count.toString();
  }

  function updateJournalCount() {
    const count = document.querySelectorAll('#panel-journal .journal-entry-card-enhanced').length;
    const countElement = document.querySelector('#panel-journal .section-count');
    if (countElement) countElement.textContent = count.toString();
  }

  function updateHistoryCount() {
    const count = document.querySelectorAll('#panel-history .memory-card').length;
    const countElement = document.querySelector('#panel-history .section-count');
    if (countElement) countElement.textContent = count.toString();
  }
</script>
